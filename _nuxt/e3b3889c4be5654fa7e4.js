(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{150:function(e){e.exports=JSON.parse('{"azure-fundamental-notes-part1":{"createdAt":"2020/4/1","fileName":"azure-fundamental-notes-part1","title":"azure-fundamental-notes-part1"},"azure-fundamental-notes-part2":{"createdAt":"2020/4/1","fileName":"azure-fundamental-notes-part2","title":"azure-fundamental-notes-part2"},"azure-fundamental-notes-part3":{"createdAt":"2020/4/1","fileName":"azure-fundamental-notes-part3","title":"azure-fundamental-notes-part3"},"azure-fundamental-notes-part4":{"createdAt":"2020/4/1","fileName":"azure-fundamental-notes-part4","title":"azure-fundamental-notes-part4"},"azure-fundamental-notes-part5":{"createdAt":"2020/4/1","fileName":"azure-fundamental-notes-part5","title":"azure-fundamental-notes-part5"},"byte-dance-interview":{"createdAt":"2019/12/14","fileName":"byte-dance-interview","title":"面试复盘12/17"},"kmp":{"createdAt":"2019/12/14","fileName":"kmp","title":"JS实现KMP算法"},"weapp-recycle-view-easy":{"createdAt":"2019/12/8","fileName":"weapp-recycle-view-easy","title":"小程序实现最简单的长列表性能优化"},"vue-reactivity":{"createdAt":"2019/12/7","fileName":"vue-reactivity","title":"通过理解Vue的响应式原理来理解MVVM"},"full-stack-common-sense-part1":{"createdAt":"2019/11/26","fileName":"full-stack-common-sense-part1","title":"想写自己的全栈小项目一定要知道的常识 part1"},"we-app-video":{"createdAt":"2019/11/15","fileName":"we-app-video","title":"小程序视频组件的使用"},"throttle-and-debounce":{"createdAt":"2019/6/28","fileName":"throttle-and-debounce","title":"理解节流与防抖"},"learn-chrome-dev-tool-part2":{"createdAt":"2019/6/27","fileName":"learn-chrome-dev-tool-part2","title":"chrome dev tool常识整理 网络，性能与内存篇"},"learn-chrome-dev-tool-part1":{"createdAt":"2019/6/26","fileName":"learn-chrome-dev-tool-part1","title":"chrome dev tool常识整理 页面元素信息篇"},"review-es6+":{"createdAt":"2019/6/25","fileName":"review-es6+","title":"划一下es6以后的重点常识"}}')},153:function(e,n){e.exports='<h2 id="教育经历">教育经历</h2>\n<h3 id="201508---201906-本科-indiana-university-bloomington">2015.08 - 2019.06 本科 Indiana University Bloomington</h3>\n<ul>\n<li>计算机科学-编译原理系（Programming Language）</li>\n</ul>\n<h2 id="校内经历">校内经历</h2>\n<h3 id="201603---201906-中国留学生学生会-it部负责人">2016.03 - 2019.06 中国留学生学生会 IT部负责人</h3>\n<ul>\n<li>负责维护学生会官网</li>\n<li>制作学生会的微信小程序，实现报名表格，投票，抽奖等功能</li>\n<li>后端使用的是微信云开发数据库</li>\n</ul>\n<h2 id="工作经历">工作经历</h2>\n<h3 id="201907---201911-必连（北京）科技有限公司-前端开发工程师">2019.07 - 2019.11 必连（北京）科技有限公司 前端开发工程师</h3>\n<ul>\n<li>参与开发第三方平台小程序Nicelook.com(Typescript+LeanCloud后端)。项目主旨是帮助自由职业者简单创建自己个性化的小程序。负责和UI设计合作实现了web端的手机界面预览原型，可以满足切换机型和拖拽。</li>\n<li>在小程序端实现了登录，留言板等功能控件。在开发图片瀑布流控件时，自己用绝对定位实现了RecycleView长列表效果的性能优化。</li>\n<li>自己从零实现了开发团队使用的CMS（Vue全家桶+ElementUI+LeanCloud)，帮助前后台合作。使开发人员可以在界面上配置和填写代码片段，直接作用到前台项目。</li>\n</ul>\n<h3 id="201706-201708无锡环球教育-托福助教">2017.06-2017.08无锡环球教育 托福助教</h3>\n<ul>\n<li>帮助托福考生准备考试，制定学习计划，和考生家长沟通孩子的学习情况。</li>\n<li>负责监督考生自习，帮助抽查单词背诵情况和理解阅读疑难问题。</li>\n</ul>\n<h2 id="个人技能">个人技能</h2>\n<ul>\n<li>熟练掌握前端原生技术HTML，CSS，JavascriptES6+，ChromeDevTool。</li>\n<li>熟练掌握现代前端开发工具NPM,Webpack的基本用法。</li>\n<li>一年半使用Vue框架的经验，理解Vue底层的响应式原理和常用功能的最佳实践，如表单校验，页面路由，状态管理，国际化等。</li>\n<li>面向对象思想和强类型语言基础扎实，在最近的工作项目中迅速掌握Typescript。</li>\n<li>能非常流畅地阅读英文技术文档。</li>\n</ul>\n<h2 id="自我评价">自我评价</h2>\n<ul>\n<li>热爱Javascript以及前端技术，喜欢亲手写出好看的网站和应用。对设计模式和代码可读性有追求。时刻保持对国内外前端生态环境的关注。有良好的沟通和团队协作能力，面对新技术能快速学习并且能结合业务代码实际情况使用。对科技，音乐，和互联网行业有浓烈的兴趣。</li>\n</ul>\n'},155:function(e,n,t){var content=t(190);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,t(35).default)("33723337",content,!0,{sourceMap:!1})},166:function(e,n,t){var map={"./azure-fundamental-notes-part1/azure-fundamental-notes-part1.md":167,"./azure-fundamental-notes-part2/azure-fundamental-notes-part2.md":168,"./azure-fundamental-notes-part3/azure-fundamental-notes-part3.md":169,"./azure-fundamental-notes-part4/azure-fundamental-notes-part4.md":170,"./azure-fundamental-notes-part5/azure-fundamental-notes-part5.md":171,"./byte-dance-interview/byte-dance-interview.md":172,"./call-apply-bind/call-apply-bind.md":173,"./full-stack-common-sense-part1/full-stack-common-sense-part1.md":174,"./kmp/kmp.md":175,"./learn-chrome-dev-tool-part1/learn-chrome-dev-tool-part1.md":176,"./learn-chrome-dev-tool-part2/learn-chrome-dev-tool-part2.md":178,"./pushing-the-limits-of-windows/pushing-the-limits-of-windows.md":181,"./resume/resume.md":153,"./review-es6+/review-es6+.md":182,"./throttle-and-debounce/throttle-and-debounce.md":183,"./vue-frontend-master/vue-frontend-master.md":184,"./vue-reactivity/vue-reactivity.md":185,"./we-app-video/we-app-video.md":186,"./weapp-recycle-view-easy/weapp-recycle-view-easy.md":187,"./webpack-frontend-master/webpack-frontend-master.md":188};function o(e){var n=r(e);return t(n)}function r(e){if(!t.o(map,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return map[e]}o.keys=function(){return Object.keys(map)},o.resolve=r,e.exports=o,o.id=166},167:function(e,n){e.exports='<h1 id="why-cloud">Why Cloud?</h1>\n<p>Only pay for what you use. Helps lower operating cost and help run infrastructure in a more efficient manner and help the business to scale out.</p>\n<h1 id="cloud-provider">Cloud Provider</h1>\n<p>Azure, AWS, Google Cloud Platform, Ali Cloud</p>\n<h1 id="services">Services</h1>\n<p>Compute Power</p>\n<p>Storage</p>\n<p>Networking</p>\n<p>Analytics</p>\n<h1 id="key-terms-concepts">Key Terms/ Concepts</h1>\n<ul>\n<li><p>High Availability</p>\n<p>Keep Services Running &amp; Minimal Downtime</p>\n</li>\n<li><p>Scalability</p>\n<ul>\n<li>Increase/ Decrease Resources for Workloads</li>\n<li>Scale out: Add more resources to spread out the workload.</li>\n<li>Scale up: Make existing resources faster or bigger so it can handle more workloads.</li>\n<li>Does not have to be done automatically.</li>\n</ul>\n</li>\n<li><p>Elasticity</p>\n<p>Automatically Increase / Decrease Resources</p>\n</li>\n<li><p>Agility</p>\n<ul>\n<li>Ability to react quickly.</li>\n<li>Result to vast amount of resources that can be provisioned.</li>\n<li>No manual intervention necessary.</li>\n</ul>\n</li>\n<li><p>Fault Tolerance</p>\n<ul>\n<li>Remain running despite service failure.</li>\n<li>Built-in redundancy.(Back Up Component)</li>\n</ul>\n</li>\n<li><p>Disaster Recovery</p>\n<p>Recovery from events that take down a cloud service.</p>\n</li>\n<li><p>Global Reach</p>\n<ul>\n<li>Reach users all over the world.</li>\n<li>Cloud services allow presence without physical footprint.</li>\n</ul>\n</li>\n<li><p>Customer Latency Capabilities</p>\n<ul>\n<li>Cloud services allow organizations to locate apps closer to end users, minimizing latency.</li>\n</ul>\n</li>\n<li><p>Predictive Cost Consideration</p>\n<ul>\n<li>Tools like cost calculators make it possible to make accurate cost estimates.</li>\n</ul>\n</li>\n<li><p>Tech skills</p>\n<ul>\n<li><p>Cloud providers manage underlying hardware.</p>\n</li>\n<li><p>Allows organizations to quickly deploy solutions without in-house hardware expertise.</p>\n</li>\n</ul>\n</li>\n<li><p>Increase Productivity</p>\n<ul>\n<li>No need to rack &amp; stack hardware</li>\n<li>No need to manage patching.</li>\n</ul>\n</li>\n<li><p>Security</p>\n<ul>\n<li><p>Cloud providers offer security policies, technologies, controls, and skill sets.</p>\n</li>\n<li><p>Results in improved security.</p>\n</li>\n</ul>\n</li>\n<li><p>Economies of Scale</p>\n<ul>\n<li><p>The ability to reduce costs while improving efficiency as a result of operating at a larger scale versus operating at a smaller scale.</p>\n</li>\n<li><p>Because cloud providers are very large business, they can leverage the benefits of economies of scale. In turn, they can pass on these benefits to customers.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id="capex-vs-opex">CapEx vs OpEx</h2>\n<ul>\n<li><p>Capital Expenditure</p>\n<ul>\n<li>Upfront expenditures on physical infrastructure</li>\n<li>Expenses are then deducted come tax time</li>\n<li>High upfront costs while value of the investment reduces over time</li>\n</ul>\n</li>\n<li><p>Operational Expenditure</p>\n<ul>\n<li>Purchase products or services as-needed</li>\n<li>Billed immediately</li>\n<li>Expenses deducted from tax bill in the same year</li>\n<li>No upfront costs pay-as-you use</li>\n<li>pay as much as can afford</li>\n</ul>\n</li>\n</ul>\n<h2 id="consumption-based-model">Consumption-Based Model</h2>\n<ul>\n<li>Incurs no up-front costs.</li>\n<li>Costly infrastructure not needed</li>\n<li>Pay for additional resources as-needed</li>\n<li>Stop paying for resources that are no longer needed</li>\n</ul>\n<h1 id="cloud-models">Cloud Models</h1>\n<h2 id="public-cloud">Public Cloud</h2>\n<p>Platform &amp; Services owned by provider</p>\n<p>REsources &amp; Services provided to multiple organizations.</p>\n<p>Typically accessed securely over internet.</p>\n<ul>\n<li><p>Resources do not belong to the organization that is utilizing them, but rather they are owned and operated by a third party such as the cloud service provider.</p>\n</li>\n<li><p>Public cloud models may make their resources available to multiple organizations.</p>\n</li>\n<li><p>The most common cloud-type deployment model.</p>\n</li>\n<li><p>Organizations are typically connected to the public cloud over the internet using a web browser.</p>\n</li>\n<li><p>Public clouds do not require deep technical knowledge to set up and use its resources.</p>\n</li>\n</ul>\n<h2 id="public-cloud-use-case">Public Cloud Use Case</h2>\n<p>A common use case scenario for Public Cloud is an organization deploying a web app on hardware and resources that are owned by a cloud provider such as Microsoft Azure or AWS.</p>\n<p>Leveraging public cloud in this case allows the organization to deploy its app quickly, without worrying about purchasing, managing or maintaining the hardware on which it runs.</p>\n<h2 id="private-cloud">Private Cloud</h2>\n<p>Owned and operated by the organization that uses the cloud resources.</p>\n<p>Each organization creates its own cloud environment in its data center.</p>\n<p>Organization provides self-services access to compute resources to its user base.</p>\n<p>Organization is responsible for maintaining and operating the service it provides.</p>\n<ul>\n<li><p>The owner of the cloud and the user of the cloud are one in the same.</p>\n</li>\n<li><p>Owner is responsible for all Hardware purchases, management, and maintenance</p>\n</li>\n<li><p>Computing resources are not shared with other organizations.</p>\n</li>\n<li><p>Connections to a private cloud are typically made over private networks.</p>\n</li>\n<li><p>Private clouds are not generally made publicly accessible.</p>\n</li>\n<li><p>Deep technical knowledge needed in-house to setup, manage, and maintain.</p>\n</li>\n</ul>\n<h2 id="private-cloud-use-case">Private Cloud Use Case</h2>\n<p>A typical use case scenario for a private cloud is an organization that uses data that cannot be put in the public cloud for legal reasons. An example would be medical data that cannot be exposed publicly.</p>\n<p>Another use case would be an organization that uses data that government policy requires to be kept in-country.</p>\n<h2 id="hybrid-cloud">Hybrid Cloud</h2>\n<p>A hybrid cloud combines both Public and Private Clouds in order to run applications where most appropriate.</p>\n<ul>\n<li><p>Some resources run in the public cloud while others runs in the private cloud.</p>\n</li>\n<li><p>Allows organizations to realize some benefits of a public model.</p>\n</li>\n<li><p>Organization retains management controls of private cloud only.</p>\n</li>\n<li><p>Tech skills are necessary to maintain the private cloud.</p>\n</li>\n</ul>\n<h2 id="hybrid-cloud-use-case">Hybrid Cloud Use Case</h2>\n<p>An example of a hybrid cloud usage scenario would be an e-commerce site that&#39;s hosted in the public cloud while connecting back to a secure database hosted in a private cloud.</p>\n<p>Hybrid cloud scenarios can be useful when organizations have some things that cannot be put in a public cloud, for legal or other reasons.</p>\n<h1 id="comparing-cloud-models">Comparing Cloud Models</h1>\n<h2 id="public-cloud-advantages">Public Cloud Advantages</h2>\n<ul>\n<li>No capital expenditures</li>\n<li>Increased agility</li>\n<li>Pay-per-use model is typical /OpEx model</li>\n<li>No maintenance requirements</li>\n<li>Fewer in-house skills are necessary</li>\n</ul>\n<h2 id="public-cloud-disadvantages">Public Cloud Disadvantages</h2>\n<ul>\n<li>Less control over security / unmet security requirements</li>\n<li>Unmet compliance requirements</li>\n<li>Lack of ownership can be seen as a disadvantage by some organizations</li>\n</ul>\n<h2 id="private-cloud-advantages">Private Cloud Advantages</h2>\n<ul>\n<li>Control retained by the organization</li>\n<li>Security controlled by the organization</li>\n<li>Compliance managed by the organization</li>\n</ul>\n<h2 id="private-cloud-disadvantages">Private Cloud Disadvantages</h2>\n<ul>\n<li>Upfront CapEx Costs</li>\n<li>Less Agile</li>\n<li>Maintenance and skill sets necessary</li>\n</ul>\n<h2 id="hybrid-cloud-advantages">Hybrid Cloud Advantages</h2>\n<ul>\n<li>Flexible Solution</li>\n<li>Cost Management (Example: Use Cheaper Storage from Public Cloud)</li>\n<li>Security &amp; Control</li>\n<li>Compliance</li>\n</ul>\n<h2 id="hybrid-cloud-disadvantages">Hybrid Cloud Disadvantages</h2>\n<ul>\n<li>Upfront CapEx</li>\n<li>Maintenance and skill sets necessary</li>\n<li>Management Complexity</li>\n</ul>\n<h1 id="iaas-paas-saas">IAAS, PAAS, SAAS</h1>\n<p>EZ</p>\n'},168:function(e,n){e.exports='<h1 id="core-architectural-services">Core Architectural Services</h1>\n<p>A region is a collections of data centers.</p>\n<p>Azure has more regions than other providers.</p>\n<p>Provide flexibility and scale.</p>\n<p>Preserve data residency.</p>\n<p>Regions offer compliance and resiliency.</p>\n<p>Some services aren&#39;t tied down to a specific regions.</p>\n<p>Some services are only available in certain regions.</p>\n<h2 id="region-pairs">Region Pairs</h2>\n<p>Region Pairs provides:</p>\n<ul>\n<li><p>Physical Isolation\nAzure prefers at least 300 miles of separation between data centers in a regional pair.</p>\n</li>\n<li><p>Platform-Provided Replication\nSome services provide automatic replication to the paired region.</p>\n</li>\n<li><p>Priority Recovery\nIn an outage, recovery of one region is prioritized out every pair.</p>\n</li>\n<li><p>Sequential Updates\nAzure System updates are rolled out paired regions sequentially (not at the same time)</p>\n</li>\n<li><p>Data Residency\nPaired regions are members of the same geography - except Brazil.</p>\n</li>\n</ul>\n<h2 id="geographies">Geographies</h2>\n<p>Discrete markets that preserve data residency and compliance boundaries.</p>\n<p>Typically contain two or more regions.</p>\n<p>Allow customers with specific data=residency and compliance needs to keep their data and applications in close proximity.</p>\n<p>Categorized as 5 options. Americas, Europe, Asia Pacific, Middles East and Africa.</p>\n<h2 id="availability-options">Availability Options</h2>\n<p>Single VM</p>\n<ul>\n<li>Availability Sets</li>\n</ul>\n<h3 id="update-domains">Update Domains</h3>\n<p>Logical Section.</p>\n<h3 id="fault-domains">Fault Domains</h3>\n<p>Hardware Section.</p>\n<ul>\n<li>Availability Zones</li>\n</ul>\n<p>Physically separate locations within an Azure region</p>\n<p>Takes Availability sets to the next level</p>\n<p>Includes one or more data centers. equipped with independent power, cooling and networking</p>\n<p>Acts as an isolation boundary</p>\n<p>If one availability zone goes down, the other continues working</p>\n<p>At least 3 availability zones in an enabled region</p>\n<h2 id="resource-group">Resource Group</h2>\n<p>Containers for multiple resources that share the same life cycle.</p>\n<p>Aggregates resources into a single manageable unit.</p>\n<p>Every Azure resource must exist in one and only one resource group.</p>\n<p>How to divide resources into groups is decided by your organization.</p>\n<h2 id="azure-resource-manager">Azure Resource Manager</h2>\n<p>Provide a management layer that enables you to create, update, and delete resources in your Azure subscription.</p>\n<p>Create, configure, manage and delete resources and resource groups.</p>\n<p>Automate using tools and SDKs.(Azure Powershell etc.)</p>\n<p>Resource Manager templates are JSON files that define the resources you wish to deploy.</p>\n<h1 id="azure-compute">Azure Compute</h1>\n<p>Provide computing resources such as disks, CPUs, memory, networking, and OS.</p>\n<p>Pay-as-you-go</p>\n<p>A wide range of computing solutions</p>\n<h2 id="azure-vms">Azure VMs</h2>\n<p>Virtualized Version of Physical Server</p>\n<p>Runs an OS that Allows You to Install and Run Software</p>\n<p>Retain Total Control Over the OS</p>\n<p>Run Custom Software</p>\n<h2 id="vm-scale-set">VM Scale Set</h2>\n<p>A set of identically-configured virtual machines</p>\n<p>Supports true auto-scale</p>\n<p>Scale manually, automatically, or a combination of the two</p>\n<h2 id="app-service">App Service</h2>\n<p>PaaS offering build, deploy and scale enterprise-grade apps.</p>\n<p>A fully managed platform.</p>\n<p>No infrastructure maintenance.</p>\n<h2 id="azure-functions">Azure Functions</h2>\n<p>A code-only solution</p>\n<p>Often used when you need to perform some task in response to a event.</p>\n<h1 id="container-services">Container Services</h1>\n<p>Containers are a virtualization environment. However, unlike virtual machines, you do not manage an operating system. Containers are meant to be lightweight, and are designed to be created, scaled out, and stopped dynamically.</p>\n<h2 id="azure-container-instances">Azure Container Instances</h2>\n<p>A PaaS offering that allows you to upload your containers, which it then will run.</p>\n<h2 id="azure-kubernetes-service">Azure Kubernetes Service</h2>\n<p>A container orchestrator service for managing large numbers of containers.</p>\n<h1 id="network-service">Network Service</h1>\n<h2 id="azure-virtual-network">Azure Virtual Network</h2>\n<p>Allow several types of Azure resources to securely communicate.</p>\n<p>Scoped to a single region</p>\n<p>Connect multiple virtual networks from different regions, using virtual network peering.</p>\n<p>Provide isolation, segmentation, and communication with on-prem &amp; cloud resources.</p>\n<h2 id="azure-load-balancer">Azure load balancer</h2>\n<p>Scale applications and create high availability</p>\n<p>Supports inbound and outbound scenarios</p>\n<p>Load balance incoming internet traffic and internal traffic across Azure services</p>\n<p>Port forward specific traffic</p>\n<h2 id="azure-vpn-gateway">Azure VPN Gateway</h2>\n<p>A virtual network gateway</p>\n<p>Sends encrypted traffic over the public internet between and Azure virtual Network and an on-prem network.</p>\n<p>Provides a secure connection from an on-prem environment to Azure.</p>\n<h2 id="azure-application-gateway">Azure Application Gateway</h2>\n<p>A web traffic load balancer</p>\n<p>Route traffic based on source IP address &amp; port to a destination IP address &amp; port</p>\n<p>Includes a web application firewall</p>\n<p>Redirection and session affinity features</p>\n<h2 id="azure-cdn">Azure CDN</h2>\n<p>Distributed network of servers</p>\n<p>Used to more-efficiently serve web content to users</p>\n<p>Content cached on physical, strategically-placed nodes.</p>\n<h1 id="azure-data-categories">Azure Data Categories</h1>\n<h2 id="structured">Structured</h2>\n<p>Storable in relational database tables\nSensor data and financial data</p>\n<h2 id="semi-structured">Semi-Structured</h2>\n<p>Non-relational or NoSQL data\nBooks, blogs, JSON, HTML documents</p>\n<h2 id="unstructured">Unstructured</h2>\n<p>Non-relational or blob\nPDF, JPG, videos</p>\n<h1 id="azure-storage-services">Azure Storage Services</h1>\n<h2 id="disks">Disks</h2>\n<ul>\n<li>Disks that VMs, apps, &amp; services can access</li>\n<li>Persistently store data and access it from an attached virtual hard disk</li>\n<li>Two flavors managed and unmanaged</li>\n<li>Helpful in Lift and shift operations</li>\n<li>Available in several different sizes and performance levels</li>\n</ul>\n<h2 id="files">Files</h2>\n<ul>\n<li>Setup highly available network files shares</li>\n<li>Access from anywhere with SMB protocol</li>\n<li>Secure access</li>\n<li>Migrate on-prem apps to Azure</li>\n</ul>\n<h2 id="containers">Containers</h2>\n<ul>\n<li>Object storage solution</li>\n<li>Optimized for storing lots of unstructured data</li>\n<li>You need to serve images or documents directly to a web browser</li>\n<li>Blob storage is (are) optimized for storing massive amounts of unstructured data in Azure.</li>\n</ul>\n<h2 id="queues">Queues</h2>\n<ul>\n<li>Store and retrieve messages</li>\n<li>Highly scalable</li>\n<li>Messages can be processed asynchronously</li>\n</ul>\n<h2 id="tables">Tables</h2>\n<ul>\n<li>NoSQL data store</li>\n<li>Designed for large amounts of structured data</li>\n</ul>\n<h1 id="azure-database-services">Azure Database Services</h1>\n<h2 id="azure-cosmodb">Azure CosmoDB</h2>\n<p>a globally-distributed database service that enables you to elastically and independently scale throughput and storage</p>\n<h2 id="azure-sqldb">Azure SqlDB</h2>\n<p>a relational database as a service based on the latest stable version of the Miscrosoft SQL Server database engine</p>\n<h2 id="azure-database-migration">Azure Database Migration</h2>\n<p>a fully-managed service designed to enable seamless migrations from multiple database sources to Azure data platforms with minimal downtime.</p>\n<h1 id="azure-management-tools">Azure management tools</h1>\n<h2 id="azure-portal">Azure Portal</h2>\n<p>The most common way to deploy and manage Azure resources.</p>\n<p>Get links for help on different topics.</p>\n<p>Does not offer a way to automate repetitive tasks</p>\n<h2 id="azure-powershell">Azure Powershell</h2>\n<p>Most used command-line tool</p>\n<p>Connect to Azure subscription</p>\n<p>Needs Windows PowerShell to run</p>\n<p>&quot;New-AzVm&quot;</p>\n<h2 id="azure-cli">Azure CLI</h2>\n<p>A cross-platform command-line program that you can use to connect Azure and to execute administrative commands against Azure resources.</p>\n<h2 id="azure-cloud-shell">Azure Cloud Shell</h2>\n<p>Browser-based scripting environment</p>\n<p>Allows you to choose the shell experience that suits you best</p>\n<h2 id="azure-mobile-app">Azure Mobile App</h2>\n<p>Access, manage, and monitor your Azure accounts and resources from an iOS and Android phone or tablet</p>\n<p>Get notifications and alerts about important health issues and diagnose and fix many issues.</p>\n<p>Start, stop, and restart VMs and web apps.</p>\n<p>Connect to your virtual machines and to manage permissions with role-based access control.</p>\n<h2 id="azure-rest-apis">Azure REST APIs</h2>\n<p>Service endpoints that support sets of HTTP operations, or methods.</p>\n<p>Provide create, retrieve, update, and delete access to the service&#39;s resources.</p>\n<p>Come into play when developers are developing solutions that need to talk to Azure.</p>\n<h2 id="azure-advisor">Azure advisor</h2>\n<p>Free service built into Azure portal.</p>\n<p>Azure Advisor is the tool to use when you want to get recommendations on improving your Azure\nenvironment and for when you want to find ways to save on costs.</p>\n<h1 id="azure-market-place">Azure Market Place</h1>\n<p>Connect end users with Microsoft partners, Independent Software Vendors (ISVs), and start-ups that offer solutions and service for Azure.</p>\n<p>Azure customers, IT professionals and cloud developers can find, try, purchase, and provision Azure applications and services from certified service providers.</p>\n'},169:function(e,n){e.exports='<h1 id="azure-solutions">Azure Solutions</h1>\n<h2 id="iot-internet-of-things">IoT Internet of Things</h2>\n<p>The ability to use devices to collect data and then to relay that data to a hub for further analysis.</p>\n<h2 id="azure-iot-central">Azure IoT Central</h2>\n<p>a fully-managed global IoT SaaS solution that makes it easy to connect, monitor, and manage your IoT assets at scale. (no cloud expertise necessary)</p>\n<h2 id="azure-iot-hub">Azure Iot Hub</h2>\n<p>a managed service hosted in Azure that acts as a centra message hub for bidirectional communication between IoT applications &amp; services.</p>\n<p>Support &quot;device-to-cloud&quot; and &quot;cloud-to-service&quot;</p>\n<p>Files upload from devices.\nDevices-to-cloud telemetry.\nrequest-reply.</p>\n<p>IoT Hub monitoring helps organizations maintain the health of their IoT solutions by allowing them to track events like devices creation, device failures, and device connections.</p>\n<h2 id="big-data-and-analytics">Big Data and Analytics</h2>\n<h2 id="azure-sql-data-warehouse">Azure SQL Data Warehouse</h2>\n<p>a cloud-based Enterprise Data Warehouse that leverages massively parallel processing to run complex queries quickly across petabytes of data.</p>\n<p>Analysis queries that take days to complete on a traditional database system typically complete within hours when run in SQL Data warehouse.</p>\n<h2 id="azure-hdinsight">Azure HDInsight</h2>\n<p>an open-source analytics services for enterprises that makes it easier to process massive amounts of data.</p>\n<p>Azure HDInsights supports popular open-source frameworks and cluster types.Apache Spark, Apache Hadoop.</p>\n<h2 id="azure-data-lake-analytics">Azure Data Lake Analytics</h2>\n<p>an on-demand analytics job service.</p>\n<p>Write queries to transform data and extract insights from it.</p>\n<p>Scale up or down by choosing how uch power that your need.</p>\n<p>Only pay for your job when it&#39;s running.</p>\n<h2 id="azure-databricks">Azure Databricks</h2>\n<p>an Apache Spark-based analytics platform that&#39;s optimized specifically for Microsoft Azure</p>\n<h2 id="artificial-intelligence">Artificial Intelligence</h2>\n<p>A wide range of services, including Machine Learning, which is considered the core service.</p>\n<p>Machine Learning is a technique that allows computers to leverage existing data to forecast future behaviors or outcomes.</p>\n<h2 id="azure-machine-learning-service">Azure Machine Learning Service</h2>\n<p>provides a cloud-based environment used to develop, train, test, deploy, manage, and track machine learning models.</p>\n<h2 id="azure-machine-learning-studio">Azure Machine Learning Studio</h2>\n<p>a collaborative, drag-and-drop visual workspace where your can build, test, and deploy machine learning solutions without needing to write code.</p>\n<p>less control than machine learning service</p>\n<h2 id="serverless-computing">Serverless Computing</h2>\n<p>an environment hosted in the cloud that allows you to run code.</p>\n<h2 id="azure-function">Azure Function</h2>\n<p>only concerned with code, do not deal with underlying infrastructure</p>\n<p>stateless, if state is required it can be connected to an Azure storage service.</p>\n<p>perfect solution when demand is variable</p>\n<h2 id="azure-logic-app">Azure logic App</h2>\n<p>a cloud service that helps you automate and orchestrate tasks, business processes and workflows when you need to integrate apps, data, system, services</p>\n<p>Simplifies the design and build-out of scalable solutions</p>\n<p>Designed in a web-based designer (SAP, ORACLE, Salesforce)</p>\n<h2 id="azure-event-grid">Azure Event Grid</h2>\n<p>a fully-managed, intelligent event routing service that uses a publish-subscribe model for uniform event consumption.</p>\n<p>Built-in support for events coming from Azure services, like storage blobs and resource groups</p>\n<p>Supports custom non-Azure-based events in near-real time via custom topics.</p>\n<h2 id="devops">DevOps</h2>\n<p>Combines people, processes, and technology to automate software delivery that provides value to the end-user base.</p>\n<h2 id="azure-devops-services">Azure DevOps Services</h2>\n<p>provides development collaboration tools including pipelines, Git repositories, Kanban boards and extensive automated and cloud-based load testing. (Can integrated with Jenkins, Chef)</p>\n<h2 id="azure-devtest-labs">Azure DevTest Labs</h2>\n<p>allows you to quickly create environments in Azure while minimizing waste and controlling cost.</p>\n'},170:function(e,n){e.exports='<h2 id="securing-network-connectivity">Securing Network Connectivity</h2>\n<p>A <em>Defense in Depth</em> strategy leverages a series of mechanisms to slow the advances of an attack that&#39;s aimed at acquiring unauthorized access to data</p>\n<h2 id="confidentiality">Confidentiality</h2>\n<p>principle of least privilege</p>\n<h2 id="integrity">Integrity</h2>\n<p>prevention of unauthorized changes to information</p>\n<h2 id="availability">Availability</h2>\n<p>ensure services remain available to authorized users</p>\n<h2 id="defense-in-depth">Defense in depth</h2>\n<ul>\n<li>Physical Security</li>\n<li>Identity and Access</li>\n<li>Perimeter</li>\n<li>Network</li>\n<li>Compute</li>\n<li>Application</li>\n</ul>\n<h2 id="azure-firewall">Azure Firewall</h2>\n<p>managed network security service in Azure that protects Azure Virtual Network Resources</p>\n<p>Uses a static public IP address to represent the virtual network resources behind it</p>\n<p>Fully integrated with Azure Monitor</p>\n<p>Azure Application Gateway also provides a firewall, called WAF, or Web Application Firewall, which provides centralized, inbound protection for web applications.</p>\n<h2 id="azure-ddos-protection">Azure DDoS Protection</h2>\n<p>slow the application down</p>\n<p>Basic tier is automatically enabled in Azure, provides the same defense that Microsoft uses</p>\n<p>Standard tier adds mitigation capabilities</p>\n<h2 id="network-security-groups">Network Security Groups</h2>\n<p>Filters network traffic to and from Azure resources connected Azure Virtual Networks</p>\n<p>Consists of inbound and outbound rules</p>\n<p>Supports as many rules as necessary, within subscription limits</p>\n<p>A default set of baseline security rules is created within the NSG.</p>\n<h2 id="application-security-groups">Application Security Groups</h2>\n<p>Configure network security as an extension of an application&#39;s structure</p>\n<p>Reuse your security policies at scale</p>\n<p>Azure handles the complexity of explicit IP addresses and multiple rule sets</p>\n<h3 id="when-designing-an-azure-security-solution-its-important-to-consider-all-aspects-of-defense-in-depth-beginning-with-the-perimeter-layer">When designing an Azure security solution, it&#39;s important to consider all aspects of defense in depth, beginning with the perimeter layer.</h3>\n<p>The Perimeter Layer protects network boundaries using Azure DDoS Protection and Azure Firewall</p>\n<p>The Network Layer only allows traffic to pass between networked resources inbound and outbound rules defined</p>\n<h2 id="core-azure-identity-services">Core Azure Identity Services</h2>\n<h2 id="authentication">Authentication</h2>\n<p>Identifies the entity seeking access to a resource</p>\n<p>Challenges for credentials</p>\n<p>Basis for creating secure identity &amp; access control principles</p>\n<h2 id="authorization">Authorization</h2>\n<p>Separate from authentication</p>\n<p>Establishes an authenticated entity&#39;s level of access</p>\n<p>Which data can be accessed, and what can be done with it</p>\n<h2 id="azure-active-directory">Azure Active Directory</h2>\n<p>Microsoft&#39;s Azure-based identity &amp; access management service</p>\n<p>Authentication\nSingle Sign-On (SSO)\nApplication Management\nBusiness to Business (B2B)\nBusiness to Customer (B2C)\nDevice management</p>\n<h2 id="multi-factor-authentication">Multi-Factor Authentication</h2>\n<p>Provides added security for user authentications by requiring two or more elements for authentication.</p>\n<p>Limits the impact of stolen credentials</p>\n<p>MFA should be enabled wherever possible</p>\n<h1 id="security-tools--features">Security Tools &amp; Features</h1>\n<h2 id="azure-security-center">Azure Security Center</h2>\n<p>Used to provide threat protection for services in Azure and on-premises</p>\n<p>COntinuously monitors all services and performs automatic security assessments</p>\n<p>Uses machine learning to detect and block malware</p>\n<p>Allows you to whitelist applications that you need to run</p>\n<p>Analyze &amp; identify possible inbound attacks and investigate threats</p>\n<p>Free tier available with every Azure subscription, limited to assessments and recommendations of Azure resources only</p>\n<p>Standard tier has full suite of security-related services and features</p>\n<p>Continuous monitoring, treat detection, JIT access control for ports, and other features.</p>\n<h2 id="azure-key-vault">Azure Key Vault</h2>\n<p>Stores application secrets in a centralized cloud location, to securely control access permissions, and access logging.</p>\n<p>Secret management\nKey management\nCertificate management\nStores Secrets backed by HSMs</p>\n<h2 id="azure-information-protection">Azure Information Protection</h2>\n<p>Automatically by administrators, via defined rules ad conditions\nBy users - manually\nA combination of automatic and manual methods, guided by recommendations</p>\n<h2 id="azure-advanced-threat-protection">Azure Advanced Threat Protection</h2>\n<p>Microsoft&#39;s security solution that is used to identify, detects, and investigate advanced threats and compromised identities</p>\n<p>Azure ATP Portal is dedicated for monitoring and responding to suspicious activity</p>\n<p>Azure ATP Sensors installed directly on domain controllers</p>\n<p>Azure ATP Cloud Service runs in Azure</p>\n<h1 id="azure-governance">Azure Governance</h1>\n<h2 id="azure-policy">Azure Policy</h2>\n<p>Used to create, assign, and manage policies that enforce different rules and effects over your resources</p>\n<p>Performs evaluations of resources and scan for those that are not compliant</p>\n<p>Can even automatically remediate resources and configurations that are non-compliant</p>\n<h2 id="role-based-access-control">Role-Based Access Control</h2>\n<p>Provides fine-grained access management for Azure resources</p>\n<p>RBAC is Based on the Allow Model</p>\n<p>Segregate duties within your team, granting only the specific access that your users need to perform their jobs.</p>\n<p>Allow only certain actions at each scope level.</p>\n<p>CanNotDelete VS ReadOnly: CanNotDelete can R/W but no D. ReadOnly can only R.</p>\n<h2 id="azure-blueprints">Azure Blueprints</h2>\n<p>Used to define repeatable sets of Azure resources that implement and adhere to standards, patterns and requirements.</p>\n<p>Resource Manager Templates VS Azure Blueprints</p>\n<p>With Azure Blueprints: The relationship between the resources and the Blueprints maintained even after the deployment.</p>\n<h1 id="monitoring-and-reporting">Monitoring and Reporting</h1>\n<h2 id="azure-tags">Azure Tags</h2>\n<p>Provide Metadata for Azure resources\nLogically organize resource into a taxonomy\nConsist of a name-value pairs\nHelp organize billing</p>\n<h3 id="tag-limitations">Tag Limitations</h3>\n<p>Not all resource type support tags\nLimited tags amount\nTag name length limitations\nTags are not inherited down into resource groups</p>\n<h2 id="azure-monitor">Azure Monitor</h2>\n<p>Allows you to collect, analyze, and act upon telemetry from both cloud and on-prem environments</p>\n<p>Monitoring data that you collect for applications is split out into several buckets or tiers</p>\n<ul>\n<li>Monitoring Data\nPerformance and functionality of code regardless of the platform</li>\n<li>Guest OS Monitoring Data\nIncludes data about the OS which your application you are running</li>\n<li>Azure Resource Monitoring Data</li>\n<li>Azure Subscription Monitoring Data</li>\n<li>Azure Tenant Monitoring Data (Active Directory)</li>\n</ul>\n<h3 id="diagnostic-settings">Diagnostic Settings</h3>\n<p>As soon as you create an Azure subscription and start deploying resources like virtual machines and web apps, Azure Monitor begins collecting data.</p>\n<p>Activity Logs record when resources are created or modifies, and Metrics tell your how resources are performing, along with the resources that they are consuming.</p>\n<h3 id="enabling-diagnostics">Enabling Diagnostics</h3>\n<p>With Azure Monitor, you can extend the data that you&#39;re collecting into the operation of the resources by enabling diagnostics and adding an agent to compute resources.</p>\n<p>You can enable guest-level monitoring, performance counters, event logs, crash dumps, sinks, and you can configure agent settings.</p>\n<h2 id="azure-service-health">Azure Service Health</h2>\n<p>Provides personalized guidance and support whenever issues with Azure services affect you</p>\n<ul>\n<li><p>Azure Status</p>\n<p>Global View of the health of Azure services\nProvides up-to-the-minute information on service availability</p>\n</li>\n<li><p>Service Health</p>\n<p>Customizable dashboard to track the state of your Azure services\nTrack active events like ongoing service issues, upcoming planned maintenance, or relevant Health advisories.</p>\n</li>\n<li><p>Azure Resource Health</p>\n<p>Helps you diagnose issues.\nObtain support when an Azure service issue affects your resources\nProvides you with a comprehensive view of the health status of Azure</p>\n</li>\n</ul>\n<h3 id="data-monitoring-only-helps-you-if-you-can-use-it-to-gain-visibility-into-the-operation-of-your-computing-environment">Data monitoring only helps you if you can use it to gain visibility into the operation of your computing environment.</h3>\n<h2 id="analyze">Analyze</h2>\n<ul>\n<li>Application Insights</li>\n<li>Azure Monitor for Containers</li>\n<li>Azure Monitor for VMs\n...</li>\n</ul>\n<h2 id="respond">Respond</h2>\n<ul>\n<li>Emails and Texts(Alerts)</li>\n<li>Automated Process (Auto-scale)</li>\n</ul>\n<h2 id="visualize">Visualize</h2>\n<ul>\n<li>Charts</li>\n<li>Dashboards</li>\n<li>Views</li>\n</ul>\n<h2 id="integrate">Integrate</h2>\n<ul>\n<li>Other Azure services can work with Azure Monitor</li>\n</ul>\n<h1 id="privacy-compliance-and-data-protection">Privacy, Compliance and Data Protection</h1>\n<p>CJIS, CSA STAR, GDPA, HIPAA, ISO/IEC 27018, NIST</p>\n<h3 id="azure-government">Azure Government</h3>\n<h3 id="azure-china-21vianet">Azure China 21Vianet</h3>\n<p>Contracts are signed between customer and 21Vianet</p>\n'},171:function(e,n){e.exports='<h1 id="azure-subscriptions">Azure Subscriptions</h1>\n<p>When you sign up for Azure, you are creating a subscription</p>\n<p>Authenticates &amp; Authorizes users so they can access Azure products</p>\n<p>An account can have one subscription or multiple subscriptions.</p>\n<p>When used as a a billing boundary. a subscription determines how an Azure account is billed for Azure usage</p>\n<p>You can use Azure subscription as access control boundaries because Azure applies access-management policies at the subscription level</p>\n<h1 id="subscription-options">Subscription Options</h1>\n<ul>\n<li><p>Free Account\n12 months of free access to many popular services</p>\n</li>\n<li><p>pay as you go\nallows you to pay only for what you use</p>\n</li>\n<li><p>member offer\noffers made available to those with existing memberships to certain Microsoft products and services</p>\n</li>\n</ul>\n<h1 id="organization-structure">Organization Structure</h1>\n<ul>\n<li><p>Management Groups\ncontainers that help you manage access, policy, and compliance for multiple subscriptions</p>\n<p>10000 management groups can be supported</p>\n</li>\n<li><p>Subscriptions\ngroups together user account and resources that have been created by those user accounts</p>\n</li>\n<li><p>Resource Group\nlogical group is a logical container that you deploy resources to</p>\n</li>\n<li><p>Resources\nSpecific service instance like Azure VMs</p>\n</li>\n</ul>\n<h2 id="planning--managing-costs">Planning &amp; Managing costs</h2>\n<ul>\n<li>Enterprise Customer</li>\n</ul>\n<p>Typically signs an Enterprise Agreement with Azure Commits to spending a negotiated amount</p>\n<ul>\n<li>Web Direct Customer</li>\n</ul>\n<p>Pays public prices for Azure resources\nPays for services monthly, via the Azure website</p>\n<ul>\n<li>Cloud Solution Providers</li>\n</ul>\n<p>Usually Microsoft partners that organization hire\nCustomers pay CSP directly for services</p>\n<h2 id="factors-that-affect-costs">Factors that Affect Costs</h2>\n<ul>\n<li>Resource Type</li>\n</ul>\n<p>Because Azure costs are resource-specific, the usage that Azure tracks will depend on the resource type</p>\n<ul>\n<li>Service</li>\n</ul>\n<p>Azure usage rates, and billing periods, will sometimes differ between Enterprise, Web Direct, and CSP customers</p>\n<ul>\n<li>Location</li>\n</ul>\n<p>Because Azure infrastructure is globally distributed, there will be instances where usage\ncosts vary between locations.</p>\n<h2 id="zones-for-billing-purposes">Zones for Billing Purposes</h2>\n<p>Four Zones: Zone 1, Zone 2, Zone 3, DE Zone 1</p>\n<h2 id="azure-pricing-calculator">Azure Pricing Calculator</h2>\n<p>Used to estimate the cost of different Azure products</p>\n<h2 id="tco-calculator">TCO Calculator</h2>\n<p>Total cost of ownership calculator</p>\n<p>Allows you to estimate cost savings that you can realize by migrating your workloads to Azure</p>\n<p>Define Workloads, Adjust Assumptions, View Report</p>\n<h2 id="minimizing-costs">Minimizing Costs</h2>\n<ul>\n<li><p>Cost Analysis</p>\n<p>Use the Azure Pricing Calculator and the TCO Calculator</p>\n</li>\n<li><p>Monitor Usage</p>\n<p>Azure Advisor identifies unused and under-utilized resources</p>\n</li>\n<li><p>Spending Limits</p>\n<p>Designed to help prevent your from exhausting the credit on your account\nNot available for pay-as-you-go</p>\n</li>\n<li><p>Reservations</p>\n<p>Discounted prices on certain products/resources if you pay in advance</p>\n</li>\n<li><p>Locations/Regions</p>\n<p>Choose lower-cost locations and regions when deploying resources</p>\n</li>\n<li><p>Cost-Saving Offers</p>\n<p>Stay up-to-date with the latest Azure customer and subscription offers</p>\n</li>\n<li><p>Leverage Tags</p>\n<p>Apply tags to resources and use those tags to organize billing data</p>\n</li>\n</ul>\n<h2 id="cost-management">Cost Management</h2>\n<p>A set of tools that you use to monitor allocate, optimize your Azure costs</p>\n<h1 id="azure-support-options">Azure Support Options</h1>\n<h2 id="support-plan-options">Support Plan Options</h2>\n<p>All Azure subscriptions include free access to billing and subscription support, Azure products and services documentation, online self-help documentation, white papers, and community support forums.</p>\n<ul>\n<li>Basic Support</li>\n<li>Developer Support</li>\n<li>Standard Support</li>\n<li>Professional Support</li>\n</ul>\n<p>The type of Azure customer you are determines what support plans you can select and how you are billed for them.</p>\n<h2 id="alternative-support-channels">Alternative Support Channels</h2>\n<p>MSDN Azure Forums\nStack Overflow\nServer Fault\nAzure General Feedback\nAzureSupport Twitter</p>\n<h2 id="knowledge-center">Knowledge Center</h2>\n<p>Searchable Database contains answers to many questions</p>\n<h1 id="service-level-agreement">Service Level Agreement</h1>\n<p>SLAs are formal documents that detail the performance standards that apply to Azure products and services</p>\n<p>There are separate SLAs for many individual Azure products and services</p>\n<p>SLAs also define performance standard AND what happens if a service or product fails to meet the designated availability commitments</p>\n<p>Performance targets are outlined in Service Level Agreements</p>\n<p>Performance-targets range form 99.9% to 99.99%</p>\n<p>Service Level Agreements also describe how Microsoft will respond in the event of an Azure product or service failure that results in a missed SLA</p>\n<p>does not offer SLA for free products</p>\n<h2 id="application-slas">Application SLAs</h2>\n<p>Azure customer can use Application SLAs to evaluate how their own Azure solutions are meeting their business requirements</p>\n<p>When you crate an Application SLA, you should identify workloads that the SLA will apply to, and you should plan for usage patterns</p>\n<p>Because usage patterns of your solution will play a role in the SLA requirements that you define, you should identify differences in requirements during critical &amp; non-critical periods.</p>\n<p>On the flip side, you should minimize costs during non-critical periods by running the application in a single region</p>\n<h2 id="mttr">MTTR</h2>\n<p>Mean Time To Recover\nThe average time it takes to restore a component or service after a failure occurs</p>\n<h2 id="mtbf">MTBF</h2>\n<p>Mean Time Between Failures\nthe length of time that you can reasonably expect a component to last between outages</p>\n<h2 id="rto">RTO</h2>\n<p>Recovery Time Objective\nrefers to the maximum acceptable time that an application or service can be unavailable after a failure</p>\n<h2 id="rpo">RPO</h2>\n<p>Recovery Point Objective\nDefines the maximum duration of data loss that is acceptable during a disaster</p>\n<h1 id="service-life-cycle-in-azure">Service Life cycle in Azure</h1>\n<h2 id="public-and-private-preview-features">Public and Private Preview features</h2>\n<p>Microsoft offers previews of certain Azure services, features, and functionality. Through Azure Previews, you can test these pre-release offerings.</p>\n<ul>\n<li>Private Preview\nan Azure feature available to certain Azure customers for evaluation purposes</li>\n<li>Public Preview\nan Azure feature available to all Azure customers for evaluation purposes</li>\n</ul>\n<p>Although an Azure service my be available in preview, it may not be ready for production deployments</p>\n'},172:function(e,n){e.exports='<h1 id="面试复盘1217">面试复盘12/17</h1>\n<h3 id="写出下列代码的返回结果">写出下列代码的返回结果</h3>\n<pre><code>async function async1() {\n    console.log(&quot;async1 start&quot;);\n    await async2();\n    console.log(&quot;async1 end&quot;);\n}\n\nconsole.log(&quot;script start&quot;);\nasync1();\n\nasync function async2() {\n    console.log(&quot;async 2&quot;);\n}\n\nsetTimeout(() =&gt; {\n    console.log(&quot;setTimeout&quot;);\n});\n\nnew Promise(resolve =&gt; {\n    resolve();\n    console.log(&quot;promise1&quot;);\n}).then(() =&gt; {\n    console.log(&quot;promise2&quot;);\n});\n\nconsole.log(&quot;script end&quot;);\n</code></pre><p>一条一条分析，首先毋庸置疑打印 script start，然后执行 async1 函数，进入 async1 函数，打印 async1 start。因为又 await 关键词所以要同步执行，执行 async2 函数，打印 async2， 回到 async1 函数，await 后面的东西被看作是微任务，跳过。然后遇到 setTimeout，异步任务，跳过。然后遇到 new Promise，这个东西因为在构造一个 Promise 所以是同步任务，所以执行，里面打印 promise1。后面点 then 是微任务，跳过。然后打印 script end。</p>\n<p>回头看刚才跳过的东西，微任务优先于其他异步任务，所以打印 async1 end， promise2。然后执行 setTimeout。 所以最后结果为。</p>\n<pre><code>script start\nasync1 start\nasync 2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout</code></pre><h3 id="cdn-原理">CDN 原理</h3>\n<ul>\n<li>获取响应速度最快的 CDN 节点的 IP 地址</li>\n<li>向 CDN 节点发出访问请求，而不是原始服务器</li>\n<li>对静态内容做缓存</li>\n</ul>\n<h3 id="实现自动补全输入框要注意什么">实现自动补全输入框要注意什么</h3>\n<ul>\n<li>快速输入时的防抖</li>\n<li>是否时模糊搜索</li>\n<li>候选项数量太多的时的处理</li>\n</ul>\n<h3 id="电子邮件的正则表达式">电子邮件的正则表达式</h3>\n<p>^[a-zA-Z0-9\\_-]+@[a-zA-Z0-9\\_-]+(.[a-zA-Z0-9\\_-]+)+$</p>\n<h3 id="二叉树的所有节点值的和">二叉树的所有节点值的和</h3>\n<pre><code>// Node结构\nclass TreeNode {\n    constructor(val) {\n        this.val = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nconst input = [-10,9,20,null,null,15,7];\n\n// 根据一个Array生成一棵二叉树\nfunction makeTree(input) {\n    let queue = [];\n    let root = new TreeNode(input.shift());\n    queue.push(root);\n    while (queue.length &gt; 0) {\n        let newQueue = [];\n        for (let node of queue) {\n            const leftVal = input.shift();\n            const rightVal = input.shift();\n            if (leftVal !== undefined) {\n                const leftNode = new TreeNode(leftVal);\n                node.left = leftNode;\n                newQueue.push(node.left);\n            }\n            if (rightVal !== undefined) {\n                const rightNode = new TreeNode(rightVal);\n                node.right = rightNode;\n                newQueue.push(node.right);\n            }\n            console.log(node);\n            queue.shift();\n        }\n        queue = newQueue;\n    }\n    return root;\n}\nlet makeTreeRes = makeTree(input);\n\n// 计算树中所有节点的和\nfunction pathSum(root) {\n    if (!root) {\n        return 0;\n    } else {\n        return root.val + pathSum(root.left) + pathSum(root.right);\n    }\n}\n\nconsole.log(pathSum(makeTreeRes)) // 41</code></pre><h3 id="实现-arrayflatten">实现 Array.flatten</h3>\n<pre><code>// flat一层\nfunction flatten(arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n// 根据参数flat\nfunction flattenWithDepth(arr, depth) {\n  while(depth--) {\n    arr =  Array.prototype.concat.apply([], arr)\n  }\n  return arr\n}</code></pre><h3 id="leetcode-394-decode-string">Leetcode 394 Decode String</h3>\n<pre><code>function decodeString(s) {\n  let num = &quot;&quot;\n  let unit = &quot;&quot;\n  let stack = []\n\n  for(let char of s) {\n    if(char == &quot;[&quot;) {\n      let item = [num, unit]\n      stack.push(item)\n      num = &quot;&quot;\n      unit = &quot;&quot;\n    } else if(char =&quot;]&quot;) {\n      let outItem = stack.pop()\n      let curRes = out[1]\n      for(let index = 0; index &lt; out[0]; index++ ) {\n        curRes += unit\n      }\n      unit = curRes\n    } else if(!isNaN(parseInt(char))) {\n        num += char\n    } else {\n      unit += char\n    }\n  }\n  return unit\n}</code></pre><h3 id="实现-promiseall">实现 Promise.all</h3>\n<pre><code>Promise.prototype.myAll = function(promiseArray) {\n    return new Promise(resolve =&gt; {\n        let counter = 0;\n        for (let prom of promiseArray) {\n            console.log(prom);\n            Promise.resolve(prom).then(res =&gt; {\n                console.log(counter);\n                counter += 1;\n                if (counter == promiseArray.length) {\n                    resolve();\n                }\n            });\n        }\n    });\n};\n</code></pre><h3 id="实现-promiserace">实现 Promise.race</h3>\n<pre><code>Promise.prototype.myRace = function(promiseArray) {\n    return new Promise(resolve =&gt; {\n        for (let prom of promiseArray) {\n            Promise.resolve(prom).then(res =&gt; {\n                    resolve();\n            });\n        }\n    });\n};\n</code></pre><h3 id="leetcode-3">Leetcode 3</h3>\n<pre><code>functionlengthOfLongestSubstring(s) {\n    let globalMax = 0\n    let queue = []\n    for(let char of s) {\n        if(queue.indexOf(char) !== -1) {\n            queue = queue.slice(queue.indexOf(char) + 1)\n        }\n        queue.push(char)\n        globalMax = Math.max(globalMax, queue.length)\n    }\n    return globalMax\n};</code></pre>'},173:function(e,n){e.exports='<h1 id="手写一些-js-函数">手写一些 JS 函数</h1>\n<p>实现 call(), 这里和 apply()的区别就是参数的个数，这边用了...args 就当一样把</p>\n<pre><code>Function.prototype.myCall = function(context, ...args) {\n    if (!context) {\n        context = window;\n    }\n    let self = this;\n    context.fn = self;\n    let result = context.fn(...args);\n    delete context.fn;\n    return result;\n};</code></pre><p>实现 bind(), bind 会把更改过的函数给 return 出来</p>\n<pre><code>Function.prototype.myBind = function(context, ...args) {\n    if (!context) {\n        context = window;\n    }\n    let self = this;\n    return function() {\n        return self.apply(context, ...args);\n    };\n};</code></pre><p>老生常谈，节流。if 里面检测 new Date().getTime()和上一次被 call 时间的差距</p>\n<pre><code>function makeThrottle(fn, delay) {\n    let lastCall = 0;\n    return function(...args) {\n        const now = new Date().getTime();\n        if (now - lastCall &lt; delay) {\n            return;\n        }\n        lastCall = now;\n        return fn(...args);\n    };\n}</code></pre><p>防抖</p>\n<pre><code>function makeDebounce(fn, delay) {\n  let timerID\n  return function(...args) {\n    if(timerID) {\n      clearTimeout(timerID)\n      timerID = setTimeout(() =&gt; {\n        fn(...args)\n      }, delay)\n    }\n  }\n}</code></pre><p>深拷贝</p>\n<pre><code>function deepCopy(obj) {\n    let result\n    if(typeof obj == &#39;object&#39;) {\n        result = object.contructor == Array ? [] : {}\n        for(let key in obj) {\n            result[key] = typeof object == &quot;object&quot; ? deepCopy(obj[key]) : obj[key]\n        }\n    } else {\n        result = obj\n    }\n    return result\n}</code></pre>'},174:function(e,n){e.exports='<h2 id="command-line">Command Line</h2>\n<p>除了我们常用的几个命令行 cd, ls, rm, pwd, mkdir, rmdir， touch, ping\n还有一些必须知道的。</p>\n<ul>\n<li>cat 查看文件内容</li>\n<li>less 分页查看文件内容</li>\n<li>man 命令行说明书</li>\n<li>rm 删除文件</li>\n<li>echo 打印</li>\n<li>kill 结束进程 默认参数为-15</li>\n<li>kill -9 强制结束</li>\n<li>pkill 根据应用名结束进程</li>\n<li>ps -ef | grep <code>&lt;processname&gt;</code> 用进程名做关键词搜索展示进程信息</li>\n<li>sudo !! 用super user权限执行上一个指令</li>\n</ul>\n<p>explain shell</p>\n<h3 id="standard-stream">Standard Stream</h3>\n<p>常用的std redirection符号，|, &gt;, &gt;&gt;, &lt; , 2&gt;</p>\n<h3 id="find">find</h3>\n<p>find / -type d -name log  查找名字为log的文件夹</p>\n<h2 id="shell">Shell</h2>\n<p>Shell 是我们使用 Command Line 的地方\nMac 的 Terminal 是一个运行 Shell 的应用， 并不是 Shell。\n<code>echo $0</code>\n可以查看目前在运行哪种 Shell</p>\n<h2 id="vim">Vim</h2>\n<p>3 种模式</p>\n<ol>\n<li>insert mode <code>i</code></li>\n<li>command mode <code>ESC</code></li>\n<li>last line mode <code>:</code></li>\n</ol>\n<p>最重要的： 什么都不做并关掉 Vim <code>ESC :q!</code>\n其他可以看 cheet sheet（微笑）。</p>\n<h2 id="server">Server</h2>\n<ul>\n<li>adduser 增加用户</li>\n<li>usermod -aG sudo <code>&lt;username&gt;</code> 将用户增加到super user group</li>\n<li>su <code>&lt;username&gt;</code> 切换用户</li>\n<li>sudo cat /var/log/auth.log 查看Server的登陆记录</li>\n<li>tail -f 实时查看一个文件的内容情况</li>\n<li>ls -a 展示隐藏文件（前缀为.）</li>\n<li>sudo service sshd restart 重启ssh服务</li>\n</ul>\n<h3 id="关闭root登录权限">关闭root登录权限</h3>\n<p>sudo vi /etc/ssh/sshd_config</p>\n<p>最简单的 nodejs http server</p>\n<pre><code>const http = require(&#39;http);\nhttp.createServer(function(req, res) {\n  res.write(&#39;Hello, World!&#39;);\n  res.end();\n}).listen(8080);\nconsole.log(&#39;Server started! Listening on port 8080&#39;);</code></pre><h2 id="ssh">SSH</h2>\n<p>客户端持有私钥， 公钥存在服务端。\n在Home路径的/.ssh文件夹中<code>ssh-keygen</code>就可以创建一个sshkey。\n有两个文件，.pub后缀的是公钥，另一个是私钥。</p>\n<h2 id="ufw">ufw</h2>\n<ul>\n<li>ufw enable 开启端口防火墙</li>\n<li>ufw allow ssh 允许ssh端口正常使用</li>\n<li>ufw reject http 拒绝http请求并返回拒绝信息</li>\n</ul>\n<h2 id="nginx">Nginx</h2>\n<p>Server本身不响应reqeust。有了Web Server比如Apache， Nginx的Server才能响应request。</p>\n<ul>\n<li>sudo apt install nginx 安装</li>\n<li>sudo service nginx start 启动</li>\n</ul>\n<p>现在Server会响应（80端口）http请求了。</p>\n<p>所有请求前往的默认根目录为\n/var/www/html</p>\n<ul>\n<li>sudo less /etc/nginx/sites-available/default 查看nginx默认配置</li>\n</ul>\n<pre><code>location / {\n  proxy_paas http://127.0.0.1:XXXX/; //请求转端口\n  return 302 htts://XXXX  // 临时重定向\n}\n\nlisten 443 http2 ssl; // 使用http2</code></pre><p>Nginx默认打开gzip， 图片不会被压缩，因为图片本身就被压缩过了。\ngzip设置在nginx.conf</p>\n<h2 id="process-manager">Process Manager</h2>\n<p>让进程在Server启动的时候就开始运行</p>\n<ul>\n<li>sudo npm i -g pm2 安装PM2</li>\n<li>pm2 start app.js 启动PM2</li>\n<li>pm2 startup 让PM2在server启动时启动</li>\n</ul>\n'},175:function(e,n){e.exports='<h1 id="js-实现-kmp-算法">JS 实现 KMP 算法</h1>\n<p>在做 leetcode 28 implement strStr()的时候，要写一个 KMP 算法。\n参考了Youtube的一个视频和阮一峰的KMP算法简介。</p>\n<p>主要是要把prefixArray给生成，然后在匹配，达到一个线性事件复杂度。</p>\n<pre><code>function findStr(text, pattern) {\n\n    function getPrefixArray(pattern) {\n        let i = 0\n        let j = 1\n        let result = new Array(pattern.length).fill(0)\n        while (j &lt; pattern.length) {\n            if (pattern[i] == pattern[j]) {\n                result[j] = i + 1\n                i++\n            } else {\n                while (i &gt; 0) {\n                    i = result[i - 1]\n                    if (pattern[i] == pattern[j]) {\n                        i++\n                        break\n                    }\n                }\n                result[j] = i == 0 ? 0 : i + 1\n            }\n            j++\n        }\n        return result\n    }\n\n    function kmp(pattern, text) {\n        const prefixArray = getPrefixArray(pattern)\n        let index = 0\n        let alreadyMatched = 0\n        while (index &lt; text.length) {\n            if (alreadyMatched == pattern.length) {\n                return index\n            }\n            else if (pattern[alreadyMatched] == text[index + alreadyMatched]) {\n                //console.log(&quot;match a char&quot;, index)\n                alreadyMatched += 1\n            }\n            else {\n                if (alreadyMatched == 0) {\n                    index += 1\n                }\n                else {\n                    let move = alreadyMatched - prefixArray[alreadyMatched - 1]\n                    index += move\n                }\n                alreadyMatched = 0\n            }\n        }\n        return -1\n    }\n    if (!text &amp;&amp; !pattern) {\n        return 0\n    }\n    return kmp(pattern, text)\n};</code></pre>'},176:function(e,n,t){e.exports='<h1 id="简单复习各个面板">简单复习各个面板</h1>\n<h3 id="elements">Elements</h3>\n<p>浏览DOM树，浏览样式。</p>\n<h3 id="console">Console</h3>\n<p>一个REPL。</p>\n<p>小技巧： 在任何非Console面板中，按ESC可以调出一个小的Console窗口，方便开发者Debug。</p>\n<h3 id="sources">Sources</h3>\n<p>类似一个文本编辑器。右边有一个Debugger，我们可以用它来Debug，可以做比console.log更复杂的事。</p>\n<h3 id="network">Network</h3>\n<p>显示请求瀑布流。</p>\n<h3 id="performance">Performance</h3>\n<p>我们可以Record一些操作，然后在这个面板中查看一些信息。</p>\n<h3 id="memory">Memory</h3>\n<p>查看页面的内存占用具体情况，可以定位内存泄漏原因。</p>\n<h3 id="application">Application</h3>\n<p>显示各种浏览器储存情况，比如local storage， Session Storage，cookie。 查看网站储存了用户的哪些信息。</p>\n<h3 id="security">Security</h3>\n<p>查看安全证书，连接是否安全。</p>\n<h3 id="audits">Audits</h3>\n<p>网站性能的总结，整合了google自家的Lighthouse功能。基于平均水平的网络速度和设备性能作出的评估。</p>\n<h1 id="深入各个面板">深入各个面板</h1>\n<h2 id="编辑-editing">编辑 Editing</h2>\n<h3 id="元素和样式">元素和样式</h3>\n<p>我们可以点击Elements面板中的HTML文本，做更改，也可以点击CSS属性，做更改。</p>\n<p>在Elements面板，按住option点击展开一个元素节点的箭头会展开当前节点下的所有子节点。</p>\n<p>在Elements面板，我们长按一个节点可以移动该节点在DOM树中的位置。</p>\n<p>右键一个DOM节点，选择Scroll into view，可以迅速找到页面中节点的位置。</p>\n<p>选择一个DOM节点，按“H”隐藏这个节点，调整的是visibility属性。如果visibilty在CSS中被标记了!important则不能被隐藏。按“delete”删除这个节点，ctrl+z撤销删除。</p>\n<p>在Style面板中，我们按住Shift点击一个颜色块，我们可以更改颜色的表达格式，在HEX，RGB，HSL间切换。</p>\n<p>在Style面板中，我们可以左键点击一个颜色块，调出调色板。这个调色板有一个最大的好处就是里面总是保存了Material Design的配色,方便了开发者选择颜色。</p>\n<p><img src="'+t(177)+'" alt=""></p>\n<p>在DOM树中选择一个节点，在右边样式面板中点击:hov，可以选择强制触发各种鼠标事件，方便开发者检查触发事件时的CSS属性。</p>\n<h3 id="元素节点">元素节点</h3>\n<p>有的时候我们会发现一个元素节点有好几个CSS选择器，比如浏览器有默认样式，你自己写了一个样式，你又用了一个CSS库比如Bootstrap加了另一个样式。我们可以点击Computed面板，来检查最后有用的样式是哪些。</p>\n<p>在Event Listeners面板中，我们可以观察该节点的所有事件。如果我们点击旁边的JS文件名，会跳转到Source面板展示事件处理函数的实现代码。</p>\n<p>当Source面板中的代码格式是被压缩过的时候，我们点击左下角的大括号{}“Pretty Print”按钮，可以美化代码样式。</p>\n<p>DOM断点。右键点击一个元素节点，选择Break On。我们有三种Debug的选择，为什么这个节点被删除(node removal)，为什么这个节点的某种属性发生了变化(attribute modification)，或者为什么这个节点的子节点发生了变化(subtree modification)。当代码触发断点的时候，Sources面板会自动打开，展示引发节点变化的具体代码。</p>\n<h3 id="更改本地文件">更改本地文件</h3>\n<p>在Sources面板中，选择Filesystem面板，我们可以打开本地的workspace。然后我们再前往Elements面板中调试CSS样式，会发现一些CSS文件图标被标上了绿色圆点，这就表示现在我们在Devtool做的调试，本地的文件也会被更改，Sass也有用，但是使用webpack的项目不一定支持这个功能。</p>\n<p>但是在Elements面板左边的DOM树中做更改，不会改变本地的HTML文件。因为DOM树只是浏览器根据我们写的HTML生成的，并没有直接更改HTML文件的能力。如果我们想要更改HTML和JS文件，我们可以在Sources面板中做到，就像使用文本编辑器一样。</p>\n<h3 id="选择元素历史">选择元素历史</h3>\n<p>在Elements面板中左键点击选择一个节点，然后进入Console面板，输入:</p>\n<pre><code>$0</code></pre><p>就会返回刚才最近选择的一个节点。以此类推，$1会返回第二近选择的一个节点。</p>\n<p>说到$符号，Console里也可以使用类似Jquery的$选择器,输入$,按回车，就会返回Jquery选择器函数。</p>\n<h2 id="调试-debug">调试 Debug</h2>\n<p>小技巧：在开发者工具的任意面板按ctrl+shift+P，我们可以打开一个命令行，里面有很多常用Dev Tool操作。方便开发者少用鼠标。而在Sources面板中ctrl+P是打开具体文件。</p>\n<h3 id="断点">断点</h3>\n<p>在Sources面板中打开一个JS文件，我们可以在代码中加入</p>\n<pre><code>debugger;</code></pre><p>来打断点。我们还可以直接点击代码行数来打断点，行数会变蓝。当代码运行到断点的时候，我们会在调试操作面板中看到“Paused on breakpoint“的提示。<strong>注意断点是在该行代码执行前断而不是之后。</strong></p>\n<p>除了常见的Step over, Step into功能按钮，我们还有一些其他面板。</p>\n<ul>\n<li><p>Watch 我们可以在Watch中添加任何变量。可以观察该变量在当前断点的作用域中是defined还是undefined。</p>\n</li>\n<li><p>Call Stack 顾名思义，观察这个断点发生之前，被调用过的函数。</p>\n</li>\n<li><p>Scope 观察当前作用域中我们所有可以调用的变量。如果知道要具体看哪个变量还是用Watch比较方便。</p>\n</li>\n<li><p>Breakpoints 告诉我们目前可用的断点。我们可以取消打勾来取消断点。</p>\n</li>\n<li><p>XHR/fetch Breakpoint 加入自定义请求断点，在特定URL请求发生的时候打断。然后可以在Call Stack面板中找到涉及到这个请求的代码文件。</p>\n</li>\n</ul>\n<h3 id="blackbox功能">Blackbox功能</h3>\n<p>当我们使用很多库的时候，比如React，d3.js。如果我们在调试面板中看到了一些文件名属于第三方库，我们可以右键点击然后Blackbox它。意思是我们不需要看到第三方库的代码运行过程。在开发者工具的setting中，我们可以设置永久Blackbox名单。</p>\n<h3 id="条件性断点">条件性断点</h3>\n<p>当一个函数被经常调用，但是只在特定情况下出错的时候。我们可以使用条件性断点。比如我们只想要在ajax函数被传入特定参数的时候才打断，而不是所有ajax call都打断让我们看。我们可以右键点击一个行数，选择Conditional Breakpoint然后我们可以输入参数条件。这种断点，行数会变成黄色。</p>\n<p>官方文档\n<a href="https://developers.google.com/web/tools/chrome-devtools/">Chrome Developer Tool</a></p>\n'},177:function(e,n,t){e.exports=t.p+"img/f34ff82.png"},178:function(e,n,t){e.exports='<h2 id="网络-network">网络 Network</h2>\n<h3 id="瀑布流">瀑布流</h3>\n<p>随着网页的加载，每个HTTP请求都会是瀑布流中的一条。第一条都是文件document的加载，当文件被解析，随后通常是CSS文件的加载。和写在HTML文件中的标签中的顺序是一样的。但浏览器会做一些优化，比如会降低图片的优先度，提升CSS文件的优先度等。</p>\n<p>在瀑布流下方的表格中，我们可以看到请求的Name，Status，Type等信息。Initiator列的意思是，什么文件需求加载了这一行的文件。按住Shift点击表格的一行，调用该行文件的相应文件会变绿(who called it?)，该行文件调用的相应行会变红(who does it called?)。</p>\n<h3 id="瀑布流颜色">瀑布流颜色</h3>\n<ul>\n<li><p>白色 队列中。不常见。HTTP1中，浏览器一次性只能进行6个TCP连接，比如我们有7个CSS文件，那么其中的一个就会在队列中。</p>\n</li>\n<li><p>灰色 一个请求能发送前的各种停滞反应时间。</p>\n</li>\n<li><p>浅灰色 在Proxy代理服务器消耗的时间</p>\n</li>\n<li><p>深绿色 DNS查找的时间</p>\n</li>\n<li><p>橙色 建立连接时间。包括TCP握手时间和建立SSL连接时间。</p>\n</li>\n<li><p>棕色 SSL连接时间</p>\n</li>\n<li><p>绿色 等待回复的时间。也就是等待获得第一个字节的时间。如果绿色很长说明应用服务器很慢。</p>\n</li>\n<li><p>蓝色 下载回复内容的时间。和文件大小有关系。</p>\n</li>\n</ul>\n<h3 id="快照">快照</h3>\n<p>如果我们点击Capture Screenshot按钮，重新加载页面， 就可以看到网页的每次repaint，也就是网页是如何加载的。</p>\n<p>使用这个功能，我们可以知道在慢速网络下，网页是如何呈现出来的。</p>\n<h3 id="过滤信息">过滤信息</h3>\n<p>Network面板中，我们可以点击文件类型来查看特定类型的文件。左侧有个输入框也可以输入特定条件。比如larger-than:200px，就可以观察大于200px的图片请求。</p>\n<p>Disable Cache，Offline，Preserve Log三个按钮的功能是显而易见的。</p>\n<h2 id="性能-performance">性能 Performance</h2>\n<h3 id="开发者性能vs用户端性能测试">开发者性能VS用户端性能测试</h3>\n<p>开发者性能测试是在开发环境中做性能测试，但是用户端是在真实用户使用的情况下记录测试数据。以前是这么做的：</p>\n<pre><code>const start = new Date().getTime();\n\nconst end = new Date().getTime();\n\nconst time = end - start;\n</code></pre><p>这样我们就可以记录下用户作出一个操作的时间，然后将数据post回来。</p>\n<p>后来有了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance">Performance API</a>:</p>\n<pre><code>performance.mark(&#39;start&#39;)\n\nperformance.mark(&#39;end);\n\nperformance.measure(&#39;Our Measurement,&#39;start&#39;,&#39;end&#39;);\n\nperformance.getEntriesByType(&#39;measure&#39;)</code></pre><h3 id="图片性能">图片性能</h3>\n<p>一般图片过大的解决方法：</p>\n<ul>\n<li><p>resize图片</p>\n</li>\n<li><p>删除图片的meta data</p>\n</li>\n<li><p>在服务器端使用gzip，brotli, zopfli等工具。</p>\n</li>\n</ul>\n<p>还有一个HTML API要知道，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset">srcset</a>\n可以在不同窗口大小的时候加载指定的图片。</p>\n<pre><code>&lt;img srcset=&quot;small.jpg  300w,\n              medium.jpg 800w,\n              large.jpg 1200w&quot;&gt;</code></pre><p>但是为了浏览器兼容性，我们总是应该给默认的src attribute留一个URL。</p>\n<h3 id="页面卡顿-page-jank">页面卡顿 Page Jank</h3>\n<h4 id="为什么看起来卡">为什么看起来卡</h4>\n<p>现代大多数屏幕刷新率都是60帧每秒。1秒/60 = 16.66毫秒。所以我们的一个画面更新的处理时间如果超过了16毫秒，就感觉卡。</p>\n<h4 id="编译时间慢">编译时间慢</h4>\n<p>有一种卡的原因是因为，解析Javascript的时间过长。V8引擎渲染页面的时候，需要编译Javascript，生成AST(Abstract Syntax Tree)。当客户端的处理性能很差的时候，就要等很久。</p>\n<h4 id="布局抖动">布局抖动</h4>\n<p>还有一种卡的原因是因为，Layout thrashing，反复布局，又称布局抖动。</p>\n<pre><code>//Read\nconst h1 = element.clientHeight;\n//Write\nelement1.style.height = (h1 * 2) + &#39;px&#39;;\n//Read\nconst h2 = element2.clientHeight;\n//Write\nelement2.sytle.height = (h2 * 2) + &#39;px&#39;;</code></pre><p>当我们反复进行这种DOM读写操作的时候，就会造成布局抖动。</p>\n<h4 id="requestanimationframe">requestAnimationFrame</h4>\n<p>如果我们可以将读和写完全分开，一次性操作所有读，一次性操作所有写，就不会有这种情况，但是这是不现实的。这就是使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame">window.requestAnimationFrame()</a>的原因。</p>\n<p>简单说requestAnimationFrame将读写操作和屏幕刷新率匹配起来，当浏览器准备好更新下一帧时，做想做的操作，减少性能浪费，避免跳帧。关于这个话题有很多写Event Loop的文章里也有写，这里不多写。</p>\n<h4 id="观察页面重绘情况">观察页面重绘情况</h4>\n<p>在开发者工具中，我们在更多工具中可以找到Rendering的选项。</p>\n<p><img src="'+t(179)+'" alt="图片描述"></p>\n<p>打开这个选项，页面每次repaint的地方都会变成绿色，帮助开发者观察是否一些没必要重绘的地方在不停的被重绘，浪费性能。</p>\n<h3 id="录制操作和分析">录制操作和分析</h3>\n<p>我们点击录制按钮，在页面上做一些操作，比如Scroll。Performance面板中就会有一些数据。\n<img src="'+t(180)+'" alt="图片描述"></p>\n<p>最下方有一个饼状图是一个概括总结。</p>\n<p>展开Main行，X轴代表处理时间，Y轴是Call Stack。Y轴高没关系，只是函数之间不断的调用，但是如果有色块很宽的话就说明处理时间很长。</p>\n<p>我们可以使用WASD来操作。按W Zoom In可以看到具体信息。</p>\n<p>找到一个很宽的色块，看之前是哪个色块调用了这个色块，然后我们就可以在下方Summary面板中找到具体文件名，点击去Sources面板看代码。</p>\n<h2 id="内存-memory">内存 Memory</h2>\n<h3 id="js中的内存泄漏">JS中的内存泄漏</h3>\n<p>当一些内存没有按开发者的意愿被释放的时候，就出现了内存泄漏。</p>\n<h4 id="常见的内存泄漏情况">常见的内存泄漏情况</h4>\n<ul>\n<li><p>意外添加的全局变量</p>\n<pre><code>function foo() {\nbar = &quot;Hi&quot;\n}</code></pre><p>当foo被调用的时候，因为bar没有变量声明关键词const， var， let。JS就会一直向上找这个变量到全局作用域，然后会为你创建一个全局变量bar。当这个函数结束的时候，你以为这个bar会被回收，但其实它一直留在全局。设想如果这个bar不是“Hi”而是一个拥有很多元素的array，它留在了全局作用域，这并不是我们想要的情况。</p>\n</li>\n<li><p>没有取消的计时器</p>\n</li>\n</ul>\n<p>顾名思义，计时器没有被取消或移除。</p>\n<ul>\n<li>多余的DOM元素变量</li>\n</ul>\n<pre><code>const button = document.getElementById(&#39;button);\n\ndocument.body.removeChild(\n  document.getElementById(&#39;button)\n);\n}</code></pre><p>这里我们在DOM中移除了这个button，但是之前指向这个元素的reference还在，就是变量button。所以这个reference就留在了内存中。</p>\n<h3 id="发现内存泄漏">发现内存泄漏</h3>\n<p>打开Chrome的任务管理器，确保Javascript Memory列有显示。我们可以看到每个标签页的内存使用情况。如果有一个标签页的内存使用不稳定，一直在上升，说明出现了内存泄漏。</p>\n<p>在Performance面板记录下的数据中，如果我们打勾Memory选项，我们就可以看到Memory行。如果线图不停的上升，就说明出现了内存泄漏。</p>\n<h3 id="定位内存泄漏">定位内存泄漏</h3>\n<p>在开发者工具的Memory面板中，我们可以选择Heap Snapshot，记录一个当前页面具体内存使用情况的快照。注意Shallow Size列和Retained Size列。</p>\n<p>Shallow Size是对象自身占用内存的大小，而Retained Size是指我们移除Object后能获得多少空间，也就是将对象本身和连同的相关对象一起删除后释放的内存大小。比如一个变量指向一个很大的Object，这个变量本身是个reference很小（Shallow Size很小），但是移除这个变量以后，我们就可以获得很大的空间（Retained Size很大)。</p>\n<p>我们可以根据Shallow Size给Heap Snapshot排序，找到占用内存最多的对象，如果不确认是否是内存泄漏，可以再记录一个Heap Snapshot做对比。如果该对象的Shallow Size增长了，说明确实出现了内存泄漏。我们可以根据工具给的提示信息，找到开发代码片段做修改。</p>\n<h2 id="评估-audit">评估 Audit</h2>\n<p>现在的Audit面板整合了谷歌的Lighthouse服务。网上还有一些其他不错的第三方服务如webpagetest， sonarwhal。</p>\n<p>官方文档\n<a href="https://developers.google.com/web/tools/chrome-devtools/">Chrome Developer Tool</a></p>\n'},179:function(e,n,t){e.exports=t.p+"img/2c43c7a.png"},180:function(e,n,t){e.exports=t.p+"img/71c8731.png"},181:function(e,n){e.exports='<h2 id="物理内存">物理内存</h2>\n<p>Physical memory also contributes to the system virtual memory limit, which is the sum of roughly the size of physical memory plus the maximum configured size of any paging files. </p>\n<p>Physical memory also can indirectly limit the maximum number of processes</p>\n<p>page is logic</p>\n<p>frame is physical</p>\n<p>pages to frames</p>\n<p>physical memory address will be divided to equal size frames</p>\n<p>The kernel and device drivers use nonpaged pool to store data that might be accessed when the system can’t handle page faults.</p>\n'},182:function(e,n){e.exports='<h2 id="string">String</h2>\n<h3 id="template-strings">Template Strings</h3>\n<p>连接String更方便直观。使用反引号包括要生成的String，使用<code>${}</code>包括具体变量。</p>\n<pre><code>var name = &quot;Yixuan&quot;;\nvar email = &quot;yixuan124@gmail.com&quot;;\nvar title = &quot;Student&quot;;\n\n//以前\nvar msg = &quot;Welcome! Your &quot; +\n    title + &quot; is &quot; + name + &quot;, contact: &quot; +\n    email + &quot;.&quot;;\n\n//现在\n\nvar msg = `Welcome! Your ${title} is ${name}, contact: ${email}.`\n\n//Welcome! Your name is Yixuan, contact: yixuan124@gmail.com.</code></pre><h3 id="tagged-templates">Tagged Templates</h3>\n<p>在模版字符串前调用自定函数，来定制模版字符串的解析方式。这个函数的第一个函数包含一个字符串值的数组，其余的参数是一系列的$表达式的引用变量，可以用...操作来把这些参数当成一个数组。</p>\n<p>这个例子中我们的自定函数formatCurrency将字符串中的数字加上了$符号并保留两位小数。</p>\n<pre><code>var amount = 4.2;\nvar msg = formatCurrency`The total for your order is ${amount}.`\n\nfunction formatCurrency(strings, ...values) {\n  var str = &quot;&quot;;\n  //console.log(strings);\n  for (let i = 0; i &lt; strings.length; i++) {\n    str += strings[i];\n\n    if( i &lt; values.length){\n      console.log(typeof values[i]);\n      if(typeof values[i] == &quot;number&quot;) {\n        str += `$${values[i].toFixed(2)}`;\n      }else {\n        str += values[i];\n      }\n    }\n  }\n  return str;\n}\n\nconsole.log(msg);\n//The total for your order is $12.30.</code></pre><h3 id="string-padding--string-trimming">String Padding &amp; String Trimming</h3>\n<p>JS标准库中现在自带给字符串两边加内容和删减空格的方法。</p>\n<p>padStart给字符串左边加内容，padEnd给字符串右边加内容。</p>\n<pre><code>var str = &quot;Hello&quot;;\n\nstr.padStart(5); // &quot;Hello&quot;\nstr.padStart(8) // &quot;   Hello&quot;\nstr.padStart(8, &quot;*&quot;); // &quot;***Hello&quot;\nstr.padStart(8, &quot;12345&quot;); // &quot;123Hello&quot;\nstr.padStart(8, &quot;ab&quot;); // abaHello&quot;\n\nstr.padEnd(8) // &quot;Hello   &quot;\nstr.padEnd(8, &quot;*&quot;) // &quot;Hello***&quot;\nstr.padEnd(8, &quot;ab&quot;); // &quot;Helloaba&quot;\n</code></pre><p>trimStart去除左边空格， trimEnd去除右边空格。</p>\n<pre><code>var str = &quot;   some stuff \\t\\t&quot;;\n\nstr.trim(); // &quot;some stuff&quot;\nstr.trimStart(); // &quot;some stuff      &quot;\nstr.trimEnd(); // &quot;   some stuff&quot;</code></pre><h2 id="destructuring">Destructuring</h2>\n<p>有时我们get到了一个很大的JSON对象，我们需要把里面的一些值分配到变量当中。解构让这个操作更方便。</p>\n<p>看一个例子。</p>\n<pre><code>var tmp = getSomeRecords();\n//tmp是一个拥有两个对象的数组。\n\n//以前\n\nvar first = tmp[0];\nvar second = tmp[1];\n\nvar firstName  = first.name;\nvar firstEmail = first.email !== undefined ? first.email : &quot;no email&quot;;\n\nvar secondName = second.name;\nvar secondEmail = second.email !== undefined ? first.email : &quot;no email&quot;;\n\n//现在\n\nvar [\n  {// 创建一个叫做firstName的变量，值是数组中第一个对象中name键的值。\n\n    name: firstName,\n\n    // 创建一个叫做firstEmail的变量，值是数组中第一个对象中email键的值,如果没有这个键则使用默认值“no email&quot;。\n\n    email: firstEmail = &quot;no email&quot;\n\n  },\n  {\n    name: secondName,\n    email: secondEmail = &quot;no email&quot;\n  }\n] = tmp;</code></pre><p>注意在这个例子中，赋值等号左边的[],这个中括号不代表数组，而代表一种解构赋值的pattern模式。还有要注意的是像上面这个例子的email的默认值只会在检测到undefined的时候才会被使用，如果值是null，不会触发使用默认值。</p>\n<p>看一个更简单的例子。</p>\n<pre><code>function data(){\n  return [1,2,3];\n}\n// 以前\nvar tmp = data();\nvar first = tmp[0];\nvar second = tmp[1];\nvar third = tmp[2];\n\n//现在\n\nvar [\n    first,\n    second,\n    third\n    ] = data();</code></pre><p>如果左边的变量比右边的值多，多余的变量的值就会是undefined。如果左边的变量比右边的值少，多余的值会被忽略。</p>\n<p>如果我们要在一个变量里多赋几个值呢？</p>\n<pre><code>data = [1,2,3,4,5];\n\nvar [\n  first,\n  second,\n  third,\n  ...fourth\n] = data;\n\n//这里fourth是[4,5];</code></pre><p>如果值不够</p>\n<pre><code>data  =[1,2,3];\nvar [\n  first,\n  second,\n  third,\n  ...fourth\n] = data;\n\n//这里fourth是空数组[];</code></pre><p>有的时候我们需要交换变量的值，用解构也更方便。</p>\n<pre><code>var x = 10;\nvar y = 20;\n\n//以前\nvar tmp = x;\nx = y;\ny = tmp;\n\n//现在\n]\n[y,x] = [x,y];</code></pre><p>有的时候我们将一个数组传入函数的时候，我们只需要它的前三个元素，我们也可以使用解构，在函数参数声明的时候就做到这步。</p>\n<pre><code>function data([\n  first,\n  second,\n  third\n]) {\n}</code></pre><p>解构赋值如果出现赋值错误，和普通赋值一样，也会报错。</p>\n<pre><code>var data = null;\n\nvar [first, second] = data;\n\n//TypeError\n\nfunction foo([first,second])\n} {\n  ...\n}\n\nfoo(data);//传入null\n\n//TypeError</code></pre><p>这个时候我们需要Graceful Fallback（降级，向下兼容）</p>\n<pre><code>var data = null;\nvar [first, second] = data || [];\n\n//不报错\n\nfunction foo([first,second] = [])\n} {\n  ...\n}\n//不报错</code></pre><p>嵌套解构</p>\n<pre><code>var data = [1,[2,3],4];\n\nvar [\n  first,\n  [\n    second,\n    third\n  ],\n  fourth\n] = data;</code></pre><h2 id="object-destructuring">Object Destructuring</h2>\n<p>有的时候我们有一个默认的对象，但是我们需要根据一个新传过来的对象，来创建一个新对象。举个例子，我们知道的表单信心有name,wechat,phone,gender等属性（键名），但是有时表单会有新的属性。这是我们可以用解构赋值来很好的创建出一个新对象，来传到后端或传到数据库。</p>\n<pre><code>\nfunction makeObject({\n  name = &quot;default name&quot;,\n  wechat = &quot;default wechat&quot;,\n  phone = &quot;default phone&quot;,\n  gender = &quot;none&quot;,\n  ...otherProps\n} = {}) {\n  return {\n    name, \n    wechat, \n    phone, \n    gender,\n    ...otherProps\n  }\n}\n\nconst obj = {\n  name: &quot;wyx&quot;,\n  wechat: &quot;weixin&quot;,\n  gender: &quot;male&quot;,\n  age:&quot;22&quot;,\n  year:&quot;2019&quot;\n}\n\nconst newObj = makeObject(obj);\nconsole.log(newObj);\n/*\n{ name: &#39;wyx&#39;,\n  wechat: &#39;weixin&#39;,\n  phone: &#39;default phone&#39;,//没有的属性使用默认值\n  gender: &#39;male&#39;,\n  age: &#39;22&#39;,\n  year: &#39;2019&#39; }\n  */\n</code></pre><h2 id="array">Array</h2>\n<h3 id="arrayfind">Array.find()</h3>\n<p>找到数组中相应的值，如果有就返回这个值，没有就undefined。</p>\n<pre><code>var arr = [{a:1},{a:2}];\n\nvar res = arr.find(v =&gt; v &amp;&amp; v.a &gt; 1);\nconsole.log(res);\n// {a:2}\n\nres = arr.find(v =&gt; v &amp;&amp; v.a &gt; 10);\nconsole.log(res);\n// undefined\n</code></pre><h3 id="arrayfindindex">Array.findIndex()</h3>\n<p>找到相应值的index</p>\n<pre><code>var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;];\nvar res = arr.findIndex(v =&gt; v &amp;&amp; v == &quot;c&quot;);\nconsole.log(res);\n// 2\n\nres = arr.findIndex(v =&gt; v &amp;&amp; v == &quot;x&quot;);\nconsole.log(res);\n// -1</code></pre><h3 id="arrayincludes">Array.includes()</h3>\n<p>用来代替以前的Array.indexOf(xxx) != -1</p>\n<pre><code>var arr = [10,20,30,40];\n\n//以前\nif(arr.indexOf(30) != -1){\n  console.log(&quot;exist!&quot;);\n}\n\n//现在\n\nif(arr.includes(30)) {\n  console.log(&quot;exist!&quot;);\n}\n//exist!</code></pre><h3 id="arrayflat">Array.flat()</h3>\n<p>摊开数组，可以根据传入参数改变具体摊开的层数。默认摊开一层。</p>\n<pre><code>var nestedArray = [1,2,[3,4],[5,[6,7]]];\n\nnestedValues.flat(0);\n//[1,2,[3,4],[5,[6,7]]]\nnestedValues.flat();  //default 1\n//[1,2,3,4,5,[6,7]]\nnestedValues.flat(2);\n//[1,2,3,4,5,6,7];</code></pre><h3 id="arrayflatmap">Array.flatMap()</h3>\n<p>flatMap只能摊开一层，如果需要更多层，需要分开使用map()和flat().</p>\n<pre><code>[1,2,3,4,5,6].flatMap(v =&gt; {\n  if (v % 2 == 0) {\n    return [v, v * 2];\n  }\n  else {\n    return [];\n  }\n})\n\n//[2,4,4,8,6,12]</code></pre><h2 id="iterator">Iterator</h2>\n<h3 id="built-in-iterable">Built-in Iterable</h3>\n<p>Iterator简单来说，就是我们用next()来遍历一个集合。\n在ES6中，String, Array, TypedArray,Map, Set是默认iterable的。</p>\n<pre><code>var str = &quot;Hi&quot;\n//在string上使用iterator\nvar it1 = str[Symbol.iterator]();\n//这里Symbol.iterator是str对象的一个属性,我们通过[Symbol.iterator]获取到这个对象的iterator然后把它赋给it1。\n\nit1.next(); // { value: &quot;H&quot;, done: false}\nit2.next(); // { value: &quot;i&quot;, done: false}\nit3.next(); // { valye: undefinedn done:true}\n\nvar arr = [&quot;H&quot;,&quot;i&quot;];\n//在Array上使用iterator\n\nvar it2 = arr[Symbol.iterator]();\nit2.next(); // {value : &quot;H&quot;, done: false}\nit2.next(); // {value : &quot;i&quot;, done: false}\nit2.next(); // {value : undefined, done: true}\n</code></pre><h3 id="declarative-iterators">Declarative Iterators</h3>\n<p>for of 循环其实就是使用了iterator</p>\n<pre><code>var str = &quot;Hello&quot;;\nvar it = str[Symbol.iterator]();\n\n//在for loop中使用iterator\nfor(let v of it){\n  console.log(v);\n}\n\n//效果和直接使用for loop是一样的\nfor (let v of str) {\n  console.log(v);\n}\n</code></pre><p>...符号也使用iterator</p>\n<pre><code>var str =&quot;Hello&quot;;\nvar letters = [...str];\nconsole.log(letters);\n// [&quot;H&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</code></pre><h3 id="object类型没有iterator">Object类型没有iterator</h3>\n<p>我们在js中最常使用的对象类型，没有默认的iterator,我们需要自己定义一个。</p>\n<pre><code>var obj = {\n  a : 1,\n  b : 2,\n  c : 3\n}\nfor (let v of obj) {\n  console.log(v);\n}\n// TypeError!\n//想要使用for of循环的时候出现了错误\n\n//定义iterator属性\n\nobj[Symbol.iterator] = function(){\n  let keys = Object.keys(this);\n  let index = 0;\n  return {\n    next: () =&gt; {\n      if(index &lt; keys.length){\n        return {\n          done : false,\n          value : keys[index++]\n        }\n      }else {\n        return {\n          done : true,\n          value : undefined\n        }\n      }\n    }\n  };\n}\n\nconsole.log([...obj]);\n//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></pre><h2 id="generators">Generators</h2>\n<h3 id="generators-1">Generators</h3>\n<pre><code>function *generate() {\n  yield 1;\n  yield 2;\n  yield 3;\n  return 4;\n}\nvar it = generate();\nit.next(); // {value: 1, done : false}\nit.next(); // {value: 2, done : false}\nit.next(); // {value: 3, done : false}\nit.next(); // {value: 4, done : true}\n\nconsole.log([...generate()]);\n// [1,2,3]\n</code></pre><p>一个使用生成器的例子，这里我们给luckyNumbers对象一个我们自定义的生成器函数叫lucky,然后在调用这个生成器的时候使用...操作符来iterate这个生成器，打印1-30之间6的倍数。</p>\n<pre><code>var luckyNumbers = {\n  *lucky({\n    start = 0,\n    end = 100,\n    step = 1\n  } = {}) {\n    for (let i = start; i &lt;= end; i+= step) {\n      yield i;\n    }\n  }\n};\n\nconsole.log(`My lucky numbers are: ${\n  [...luckyNumbers.lucky({\n    start: 6,\n    end: 30,\n    step: 4\n  })]\n}`)\n\n//My lucky numbers are: 6,10,14,18,22,26,30\n</code></pre><h2 id="async-await">Async Await</h2>\n<h3 id="async出现的历史">Async出现的历史</h3>\n<p>这里有一个例子，我们先请求当前当前用户，获得用户数据以后，又请求当前用户所下过订单和进行中的订单的例子。</p>\n<p>以前用Promise的时候,使用链式then()来处理这种连续请求。</p>\n<pre><code>fetchCurrentUser()\n  .then(function onUser(user) {\n    //获得当前用户\n    return Promise.all([\n      //用Promise.all来做两个请求，返回的还是一个promise，如果有一个请求中有一个reject则都reject\n\n      fetchArchivedOrders( user.id ),\n      fetchCurrentOrders (user.id)\n    ]);\n  })</code></pre><p>后来我们有人不再用链式then()来处理多个请求。而是用generator来获得多个请求的response。一个generator可以yield一个promise，并且等待yield结果以后再进行下一步。但是这个方法一般要使用第三方库的一种runner函数进行，像Co，Koa都有。runner函数的作用就是在yield的时候等待结果resolve，然后再往下iterate，往下yield。</p>\n<pre><code>runner(function *main() {\n  var user = yield fetchCurrentUser();\n  var [ archivedOrders, currentOrders ] = yield Promise.all([\n    fetchArchivedOrders( user.id ),\n    fetchArchivedOrders( user.id )\n  ])\n});\n</code></pre><p>其实上面这个例子里的yield关键词，已经很像await关键词了，所以后来JS官方就推出了Async Await关键词，不再需要用第三方库的runner函数。</p>\n<pre><code>async function main() {\n  var user = await fectchCurrentUser();\n  var [archiveOrders, currentOrders] = await Promise.all([\n    fetchArchiveOrders(user.id),\n    fetchCurrentOrders(user.id)\n  ]);\n\n  return archiveOrders + currentOrders;\n}</code></pre><p>这里有个例子，我们同时请求三个file，但是保证打印结果是按顺序打印，也没有undefined。并且一请求到就立即打印结果，并不等待后续的请求完成。</p>\n<pre><code>function getFile(file) {\n  return new Promise(function(resolve){\n    fakeAjax(file,resolve);\n  });\n}\n\nasync function loadFiles(files) {\n\n  var prs = files.map(getFile);\n  //用map同时做三个请求\n\n\n\n  for (let pr of prs) {\n    console.log(await pr);\n  }\n  //在for loop中加入await关键词,来确保按顺序打印，也不会undefined。\n\n}\n\nloadFiles([&quot;files&quot;,&quot;file2&quot;,&quot;file3&quot;])；</code></pre><h3 id="async-await-problems">async await problems</h3>\n<p>async await也有一些问题</p>\n<ul>\n<li><p>await只能应对Promise</p>\n</li>\n<li><p>Starvation\npromise会在时间循环中排进microtask,会造成饥饿陷阱，这里不多写。</p>\n</li>\n<li><p>cancelation</p>\n</li>\n</ul>\n<p>Async函数是没有办法被手动取消的，比如一个request要下载巨大的文件，async函数过程就会一直进行</p>\n'},183:function(e,n){e.exports='<h2 id="节流-throttling">节流 Throttling</h2>\n<p>节流限制了一个函数可以在短时间内被调用的次数。可以这样形容：在一毫秒内最多执行此函数 1 次。</p>\n<blockquote>\n<p>Throttling enforces a maximum number of times a function can be called over time. As in &quot;execute this function at most once every 100 milliseconds.&quot;</p>\n</blockquote>\n<h4 id="再换句话说：">再换句话说：</h4>\n<p>节流会忽略在短时间内高频发生的事件，只按照计划好的频率触发。</p>\n<pre><code>//fn 要执行的函数\n//delay 计划好的执行间隔\n//返回一个函数\n\nfunction throttled(fn, delay) {\n    let lastCall = 0;//初始化lastCall\n    return function (...args) {\n        const now = (new Date).getTime();//当函数被运行，获取当前时间\n        if (now - lastCall &lt; delay) {\n\n        //这里（now - lastCall）就是间隔时间\n\n            return;//如果间隔时间小于计划好的执行间隔，什么也不做。\n        }\n        lastCall = now; //更新lastCall\n        return fn(...args);\n    } \n}</code></pre><h2 id="防抖-debouncing">防抖 Debouncing</h2>\n<p>防抖确保了一个函数只有在一个固定时间段内没有被调用过后，才会再次被调用。可以这样形容：比如说只有在 1 毫秒过后，才允许执行这个函数。</p>\n<blockquote>\n<p>Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called. As in &quot;execute this function only if 100 milliseconds have passed without it being called.&quot;</p>\n</blockquote>\n<h4 id="再换句话说：-1">再换句话说：</h4>\n<p>防抖会等待事件不再高频发生，再触发。</p>\n<pre><code>//fn 要执行的函数\n//delay 计划好的等待时间\n//返回一个函数\n\nfunction debounced(delay, fn) {\n  let timerId;\n  return function (...args) {\n    if (timerId) {//如果正在一个timeout中\n      clearTimeout(timerId);//中断timeout，不会发生setTimeout的回调函数\n    }\n    timerId = setTimeout(() =&gt; {//开始新的timeout\n      fn(...args);\n      timerId = null;\n    }, delay);\n  }\n}</code></pre><h2 id="结论">结论</h2>\n<p>节流在我们<strong>不关心函数参数</strong>是什么的时候比较有用，比如鼠标移动，滚轮事件，我们在乎的是操作的频率。</p>\n<p>防抖在我们关心<strong>高频事件发生过后，得到的那个结果</strong>的时候，比较有用，比如用户迅速输入完一串用户名，对其进行查重的结果。</p>\n<p>这个<a href="http://demo.nimius.net/debounce_throttle/">网站</a> 很好的可视化了节流与防抖。</p>\n<p>参考信息</p>\n<p><a href="https://css-tricks.com/the-difference-between-throttling-and-debouncing/">The Difference Between Throttling and Debouncing</a></p>\n<p><a href="https://blog.bitsrc.io/understanding-throttling-and-debouncing-973131c1ba07">Understanding Throttling and Debouncing</a></p>\n<p><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">Debouncing and Throttling Explained Through Examples</a></p>\n<p><a href="https://codeburst.io/throttling-and-debouncing-in-javascript-646d076d0a44">Throttling and debouncing in JavaScript</a></p>\n'},184:function(e,n){e.exports='<h1 id="reactivity">Reactivity</h1>\n<p>本文根据Evan You自己在网上的Advanced Vue Course整理。</p>\n<h2 id="getters--setters">getters &amp; setters</h2>\n<p>比如说我们需要完成一个情况, <code>let a = 3; let b = a * 10;</code>。我们需要保证 b 是 a 的 10 倍，不管我们怎么改动 a。但是我们改动 a 的时候，b 并不会自动改变，那我们应该怎样去完成这个自动更新？</p>\n<p>Vue 使用了 ES5 里的 Object.defineProperty API。\n这个 API 的介绍在 You don&#39;t know JS 的书里或者 MDN 的文档里说的都很清楚。一个 Object 的每个 Key 都是有几个 Property 可以设置的。这里我只描述怎么用这个 API 完成上面的效果。</p>\n<pre><code>const myState = {\n  a: &#39;3&#39;,\n  b: &#39;30&#39;\n};\n\nObject.defineProperty(myState, &#39;b&#39;, {\n  get() {\n    return myState[&#39;a&#39;] * 10;\n  }\n})\n\nconsole.log(myState.b); // 30\nmyState.a = 5;\nconsole.log(myState.b) // 50</code></pre><h2 id="这样就行了吗？">这样就行了吗？</h2>\n<p>上面这个步骤已经完成了我们想要的效果，每当我们去获取 myState.b 但问题是我们是自己手动 console.log 属性 b 去观察到这个 b 已经随着 a 的变化而变化过了。\n意思就是说假如我们 DOM 中有一个元素像这样在初次渲染的时候使用了 b 的值。</p>\n<pre><code>const divUseBValue = document.querySelector(&#39;#useBValue&#39;);\ndivUseBValue.innerHTML = myState.b;\n</code></pre><p>在 myState.a 的值发生变化的时候，dom 并不会相应的发生变化，我们得手动再操作 dom 更新才可以。</p>\n<p>那比较直观的想法就是：那就把 DOM 操作放在 myState.a 的 setter 里不就好了吗，每当我们改变 myState.a 的值的时候，我们就操作 dom 让元素再取一次 b 的值就好了。</p>\n<pre><code>const divUseBValue = document.querySelector(&#39;#useBValue&#39;);\n\nlet aValue; // 用一个外部变量表示该属性\nObject.defineProperty(myState, &#39;a&#39;, {\n  set(newValue) {\n    divUseBValue.innerHTML = myState.b;\n    aValue = newValue\n    // 不可以this.a = newValue， 这样会反复调用setter，爆栈\n  },\n  get() {\n    return aValue\n  }\n})\nlet bValue;\nObject.defineProperty(myState, &quot;b&quot;, {\n  get() {\n    bValue = myState.a * 10;\n    console.log(bValue)\n    return bValue;\n  }\n});\n\n// set myState.a的值, 机会触发dom变化，接下来每次都是这样\nmyState.a = 3;\n</code></pre><p>这个时候我们 JS 中只要改变 myState.a 的值，DOM 中用到 myState.b 的元素就会自己更新。</p>\n<h2 id="这样真的可以吗？-如何让他变的更抽象？">这样真的可以吗？ 如何让他变的更抽象？</h2>\n<p>上面这个例子是非常 imperative 的， 我们把更新 DOM 的操作全部放在了 myState 相关属性的 setter 里。但是把要做的 DOM 操作全部在一处声明好显然是不现实的。我们在网上都看过 Vue 是 MVVM，或者是观察者模式。那这种模式到底是什么意思呢？并且还要用到 Object.defineProperty。</p>\n<p>我们的数据<strong>Model</strong>就是我们上面用到的 myState 对象。我们的目的是在他变化的时候做一些事情，所以我们就要<strong>观察</strong>它的每一个属性。</p>\n<p>上面更新<strong>View</strong>层的操作，我们可以把它定义为一个<strong>更新</strong>函数。</p>\n<p>这个<strong>更新</strong>函数和刚才<strong>观察</strong>的某一个属性，有一个<strong>关联</strong>的关系。这一个<strong>关联</strong>中能触发很多<strong>更新</strong>函数，那这些<strong>更新</strong>函数就叫做这个<strong>关联</strong>的<strong>订阅者</strong>。</p>\n<p>Model 中的一个属性通过一个<strong>关联</strong>能触发很多<strong>更新</strong>函数，也就是说一处<strong>Model</strong>变化，通过<strong>关联</strong>引发多处<strong>View</strong>变化，那么这个<strong>关联</strong>就是我们的<strong>ViewModel</strong>了。</p>\n<p>到此我们理清了 MVVM。<strong>Model -》 ViewModel =》 View。</strong></p>\n<h2 id="dependency">Dependency</h2>\n<p>我们先来实现我们的 ViewModel，<strong>关联</strong>。就是 Dependecy。</p>\n<p>这个关联要干嘛？</p>\n<ol>\n<li>把<strong>更新</strong>函数变成他自己的<strong>订阅者</strong>。（Depend）</li>\n<li>在检查到<strong>观察</strong>对象的属性发生变化时，触发他拥有的<strong>订阅者</strong>。（Notify）</li>\n</ol>\n<p>谁会用这个关联？</p>\n<ol>\n<li>被<strong>观察</strong>的 Model 的属性的 getter。</li>\n</ol>\n<p><strong>！重点！</strong> 当<strong>更新</strong>函数第一次运行的时候，因为要获取属性的值来表现在 View 层上，所以一定会调用到这个属性的 getter。所以在第一次运行<strong>更新</strong>函数的时候，我们就要在 getter 中把这个<strong>更新</strong>函数添加到一个<strong>关联</strong>的订阅者列表中，这样这个<strong>关联</strong>之后就可以<strong>Notify</strong>它了。</p>\n<pre><code>class Dep {\n  constructor() {\n    // 订阅者列表\n      this.subscribers = new Set();\n    }\n\n  // 把一个更新函数都变成他自己的一个订阅者\n  depend() {\n    // 这个if是个重点，为什么要有这个if马上再说\n    if (activeUpdate) {\n      console.log(&quot;depending&quot;);\n      this.subscribers.add(activeUpdate);\n    }\n  }\n  // 触发所有订阅者\n  notify() {\n    this.subscribers.forEach(sub =&gt; sub());\n  }\n}</code></pre><h2 id="observe">Observe</h2>\n<p>我们会有一个对象当作 State 来保存我们需要<strong>观察</strong>的属性。这边的精髓就是 defineProperty 了。在<strong>更新</strong>函数第一次get这个属性的值的时候，创建一个 Dep 的实例，并且把这个<strong>更新</strong>函数加入到订阅者列表中，未来可以触发（notify）他。妙就妙在这个observe函数，使的State的每一个属性有了<strong>自己</strong>的关联对象，并且只把和他<strong>自己</strong>相关的<strong>更新</strong>函数加到了属于自己的<strong>关联</strong>对象的订阅者列表中。一切都因为这个getter的闭包，而顺利找到了拥有这个getter回调的属性。</p>\n<pre><code>function observe(obj) {\n  Object.keys(obj).forEach(key =&gt; {\n    let internalValue = obj[key];\n    // 一个“关联”实例\n    let dep = new Dep();\n    Object.defineProperty(obj, key, {\n      get() {\n        // 把正在执行的更新函数加到关联的订阅者列表中\n        dep.depend();\n        return internalValue;\n      },\n      set(newValue) {\n        internalValue = newValue;\n        // 触发关联实例里的所有更新函数\n        dep.notify();\n      }\n    });\n  });\n}\n</code></pre><p>那为啥dep.depend()什么参数也不用传？ 加的<strong>更新</strong>函数在哪儿呢？ 原来dep.depend的实现中有一个activeUpdate的变量，如果找到了这个变量就把他添加到自己的订阅者列表中。这个变量是什么，我们继续往下看。</p>\n<h2 id="update-function">Update Function</h2>\n<p>上边讲Dependency的代码中有一个<code>if（activeUpdate）</code>。那么这个activeUpdate是什么呢？首先我们需要这个变量的原因是因为，我们在第一次运行一个<strong>更新</strong>函数的时候，我们需要把这个<strong>更新</strong>函数添加到一个<strong>关联</strong>的订阅者列表中。</p>\n<p>下面是实现的方式： 因为JS是单线程的，一次只能有一个函数在运行。所以我们在首次用JS渲染DOM的时候，每个<strong>更新</strong>的函数在运行的时候，我们都把他交给一个全局变量，然后当这个<strong>更新</strong>函数中用到State中的属性的时候，这个属性的getter回调中的<strong>关联</strong>，就去找到当前的全局变量，加到自己的订阅者列表中。</p>\n<pre><code>let activeUpdate;\nlet update = () =&gt; {\n  do something on DOM\n};\nactiveUpdate = update;\nupdate()\nactiveUpdate = null;</code></pre><p>这样的代码虽然也可以，但是我们应该把它抽象出来做成一个函数。</p>\n<pre><code>let activeUpdate;\n\nfunction updateAndBecomeASubscriber(update) {\n  function wrappedUpdate() {\n    activeUpdate = wrappedUpdate;\n    console.log(&quot;bbb&quot;);\n    update();\n    activeUpdate = null;\n  }\n  wrappedUpdate();\n}\n</code></pre><h1 id="总结">总结</h1>\n<p>写到这里其实已经实现了一个很简单的Vue观察者模式的机制了。对MVVM也有了更透彻的理解。不得不感叹，声明式的代码固然可以很容易的让你理解代码在干什么，但是有些步骤为了实现声明式，用到了函数闭包。导致了理解函数作用域的时候在要在代码中跳跃着看，让人更难理解底层实现方式。Evan You大大在将这一部分的时候也很难connect the dots。</p>\n'},185:function(e,n){e.exports='<h1 id="通过理解vue的响应式原理来理解mvvm">通过理解Vue的响应式原理来理解MVVM</h1>\n<p>本文根据Evan You自己在网上的Advanced Vue Course整理。</p>\n<h2 id="getters--setters">getters &amp; setters</h2>\n<p>比如说我们需要完成一个情况, <code>let a = 3; let b = a * 10;</code>。我们需要保证 b 是 a 的 10 倍，不管我们怎么改动 a。但是我们改动 a 的时候，b 并不会自动改变，那我们应该怎样去完成这个自动更新？</p>\n<p>Vue 使用了 ES5 里的 Object.defineProperty API。\n这个 API 的介绍在 You don&#39;t know JS 的书里或者 MDN 的文档里说的都很清楚。一个 Object 的每个 Key 都是有几个 Property 可以设置的。这里我只描述怎么用这个 API 完成上面的效果。</p>\n<pre><code>const myState = {\n  a: &#39;3&#39;,\n  b: &#39;30&#39;\n};\n\nObject.defineProperty(myState, &#39;b&#39;, {\n  get() {\n    return myState[&#39;a&#39;] * 10;\n  }\n})\n\nconsole.log(myState.b); // 30\nmyState.a = 5;\nconsole.log(myState.b) // 50</code></pre><h2 id="这样就行了吗？">这样就行了吗？</h2>\n<p>上面这个步骤已经完成了我们想要的效果，每当我们去获取 myState.b 但问题是我们是自己手动 console.log 属性 b 去观察到这个 b 已经随着 a 的变化而变化过了。\n意思就是说假如我们 DOM 中有一个元素像这样在初次渲染的时候使用了 b 的值。</p>\n<pre><code>const divUseBValue = document.querySelector(&#39;#useBValue&#39;);\ndivUseBValue.innerHTML = myState.b;\n</code></pre><p>在 myState.a 的值发生变化的时候，dom 并不会相应的发生变化，我们得手动再操作 dom 更新才可以。</p>\n<p>那比较直观的想法就是：那就把 DOM 操作放在 myState.a 的 setter 里不就好了吗，每当我们改变 myState.a 的值的时候，我们就操作 dom 让元素再取一次 b 的值就好了。</p>\n<pre><code>const divUseBValue = document.querySelector(&#39;#useBValue&#39;);\n\nlet aValue; // 用一个外部变量表示该属性\nObject.defineProperty(myState, &#39;a&#39;, {\n  set(newValue) {\n    divUseBValue.innerHTML = myState.b;\n    aValue = newValue\n    // 不可以this.a = newValue， 这样会反复调用setter，爆栈\n  },\n  get() {\n    return aValue\n  }\n})\nlet bValue;\nObject.defineProperty(myState, &quot;b&quot;, {\n  get() {\n    bValue = myState.a * 10;\n    console.log(bValue)\n    return bValue;\n  }\n});\n\n// set myState.a的值, 机会触发dom变化，接下来每次都是这样\nmyState.a = 3;\n</code></pre><p>这个时候我们 JS 中只要改变 myState.a 的值，DOM 中用到 myState.b 的元素就会自己更新。</p>\n<h2 id="这样真的可以吗？-如何让他变的更抽象？">这样真的可以吗？ 如何让他变的更抽象？</h2>\n<p>上面这个例子是非常 imperative 的， 我们把更新 DOM 的操作全部放在了 myState 相关属性的 setter 里。但是把要做的 DOM 操作全部在一处声明好显然是不现实的。我们在网上都看过 Vue 是 MVVM，或者是观察者模式。那这种模式到底是什么意思呢？并且还要用到 Object.defineProperty。</p>\n<p>我们的数据<strong>Model</strong>就是我们上面用到的 myState 对象。我们的目的是在他变化的时候做一些事情，所以我们就要<strong>观察</strong>它的每一个属性。</p>\n<p>上面更新<strong>View</strong>层的操作，我们可以把它定义为一个<strong>更新</strong>函数。</p>\n<p>这个<strong>更新</strong>函数和刚才<strong>观察</strong>的某一个属性，有一个<strong>关联</strong>的关系。这一个<strong>关联</strong>中能触发很多<strong>更新</strong>函数，那这些<strong>更新</strong>函数就叫做这个<strong>关联</strong>的<strong>订阅者</strong>。</p>\n<p>Model 中的一个属性通过一个<strong>关联</strong>能触发很多<strong>更新</strong>函数，也就是说一处<strong>Model</strong>变化，通过<strong>关联</strong>引发多处<strong>View</strong>变化，那么这个<strong>关联</strong>就是我们的<strong>ViewModel</strong>了。</p>\n<p>到此我们理清了 MVVM。<strong>Model -》 ViewModel =》 View。</strong></p>\n<h2 id="dependency">Dependency</h2>\n<p>我们先来实现我们的 ViewModel，<strong>关联</strong>。就是 Dependecy。</p>\n<p>这个关联要干嘛？</p>\n<ol>\n<li>把<strong>更新</strong>函数变成他自己的<strong>订阅者</strong>。（Depend）</li>\n<li>在检查到<strong>观察</strong>对象的属性发生变化时，触发他拥有的<strong>订阅者</strong>。（Notify）</li>\n</ol>\n<p>谁会用这个关联？</p>\n<ol>\n<li>被<strong>观察</strong>的 Model 的属性的 getter。</li>\n</ol>\n<p><strong>！重点！</strong> 当<strong>更新</strong>函数第一次运行的时候，因为要获取属性的值来表现在 View 层上，所以一定会调用到这个属性的 getter。所以在第一次运行<strong>更新</strong>函数的时候，我们就要在 getter 中把这个<strong>更新</strong>函数添加到一个<strong>关联</strong>的订阅者列表中，这样这个<strong>关联</strong>之后就可以<strong>Notify</strong>它了。</p>\n<pre><code>class Dep {\n  constructor() {\n    // 订阅者列表\n      this.subscribers = new Set();\n    }\n\n  // 把一个更新函数都变成他自己的一个订阅者\n  depend() {\n    // 这个if是个重点，为什么要有这个if马上再说\n    if (activeUpdate) {\n      console.log(&quot;depending&quot;);\n      this.subscribers.add(activeUpdate);\n    }\n  }\n  // 触发所有订阅者\n  notify() {\n    this.subscribers.forEach(sub =&gt; sub());\n  }\n}</code></pre><h2 id="observe">Observe</h2>\n<p>我们会有一个对象当作 State 来保存我们需要<strong>观察</strong>的属性。这边的精髓就是 defineProperty 了。在<strong>更新</strong>函数第一次get这个属性的值的时候，创建一个 Dep 的实例，并且把这个<strong>更新</strong>函数加入到订阅者列表中，未来可以触发（notify）他。妙就妙在这个observe函数，使的State的每一个属性有了<strong>自己</strong>的关联对象，并且只把和他<strong>自己</strong>相关的<strong>更新</strong>函数加到了属于自己的<strong>关联</strong>对象的订阅者列表中。一切都因为这个getter的闭包，而顺利找到了拥有这个getter回调的属性。</p>\n<pre><code>function observe(obj) {\n  Object.keys(obj).forEach(key =&gt; {\n    let internalValue = obj[key];\n    // 一个“关联”实例\n    let dep = new Dep();\n    Object.defineProperty(obj, key, {\n      get() {\n        // 把正在执行的更新函数加到关联的订阅者列表中\n        dep.depend();\n        return internalValue;\n      },\n      set(newValue) {\n        internalValue = newValue;\n        // 触发关联实例里的所有更新函数\n        dep.notify();\n      }\n    });\n  });\n}\n</code></pre><p>那为啥dep.depend()什么参数也不用传？ 加的<strong>更新</strong>函数在哪儿呢？ 原来dep.depend的实现中有一个activeUpdate的变量，如果找到了这个变量就把他添加到自己的订阅者列表中。这个变量是什么，我们继续往下看。</p>\n<h2 id="update-function">Update Function</h2>\n<p>上边讲Dependency的代码中有一个<code>if（activeUpdate）</code>。那么这个activeUpdate是什么呢？首先我们需要这个变量的原因是因为，我们在第一次运行一个<strong>更新</strong>函数的时候，我们需要把这个<strong>更新</strong>函数添加到一个<strong>关联</strong>的订阅者列表中。</p>\n<p>下面是实现的方式： 因为JS是单线程的，一次只能有一个函数在运行。所以我们在首次用JS渲染DOM的时候，每个<strong>更新</strong>的函数在运行的时候，我们都把他交给一个全局变量，然后当这个<strong>更新</strong>函数中用到State中的属性的时候，这个属性的getter回调中的<strong>关联</strong>，就去找到当前的全局变量，加到自己的订阅者列表中。</p>\n<pre><code>let activeUpdate;\nlet update = () =&gt; {\n  do something on DOM\n};\nactiveUpdate = update;\nupdate()\nactiveUpdate = null;</code></pre><p>这样的代码虽然也可以，但是我们应该把它抽象出来做成一个函数。</p>\n<pre><code>let activeUpdate;\n\nfunction updateAndBecomeASubscriber(update) {\n  function wrappedUpdate() {\n    activeUpdate = wrappedUpdate;\n    console.log(&quot;bbb&quot;);\n    update();\n    activeUpdate = null;\n  }\n  wrappedUpdate();\n}\n</code></pre><h1 id="总结">总结</h1>\n<p>写到这里其实已经实现了一个很简单的Vue观察者模式的机制了。对MVVM也有了更透彻的理解。不得不感叹，声明式的代码固然可以很容易的让你理解代码在干什么，但是有些步骤为了实现声明式，用到了函数闭包。导致了理解函数作用域的时候在要在代码中跳跃着看，让人更难理解底层实现方式。Evan You大大在将这一部分的时候也很难connect the dots。</p>\n'},186:function(e,n){e.exports='<h1 id="小程序视频组件">小程序视频组件</h1>\n<p>使用小程序WXML里自带的<code>&lt;video&gt;</code>标签, 指定src即可.\n<code>&lt;video src=&quot;...&quot; /&gt;</code></p>\n<h2 id="文件链接">文件链接</h2>\n<p>从七牛,腾讯COS等云存储文件的链接可以直接播放,没有障碍. 前提是得有一个云存储.</p>\n<h2 id="第三方视频链接">第三方视频链接</h2>\n<p>从页面使用正常途径复制到的视频链接都不会是视频文件的真实链接. 内嵌iframe地址中的src虽然能在浏览器中直接打开, 其实也并未获取到源文件地址, 因为打开显示的是第三方的播放器而非浏览器自带的播放器.</p>\n<p>所以在这种情况下如果一定要通过链接播放第三方视频只能采取非正常途径. </p>\n<p>比如如找到vid后使用后门链接.\n像Youtube的后门链接为<a href="http://www.youtube.com/get_video_info?video_id=XXXX">http://www.youtube.com/get_video_info?video_id=XXXX</a>\n访问以后会得到一个需要URLDecode解析的get_video_info文件,里面会有视频文件的url,但是直接访问的结果通常都会是403.  </p>\n<p>又比如使用网络抓包工具,检查访问视频页面的网络流量,从里边找到视频源地址.</p>\n<h2 id="使用腾讯视频官方提供的小程序插件推荐">使用腾讯视频官方提供的小程序插件(推荐)</h2>\n<p>小程序使用插件需要现在小程序管理后台中添加插件.</p>\n<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/using.html">小程序插件文档</a></p>\n<p><a href="https://github.com/tvfe/txv-miniprogram-plugin">视频插件的Github仓库</a></p>\n<h3 id="使用方法">使用方法</h3>\n<p>前往: <strong>对应AppID微信公众平台后台-设置-第三方服务</strong> \n在插件管理中搜索并添加腾讯视频(wxa75efa648b60994b)</p>\n<p>回到小程序中</p>\n<pre><code>// 在wxml上这样插入视频元素\n&lt;txv-video vid=&quot;e0354z3cqjp&quot; playerid=&quot;txv1&quot;&gt;&lt;/txv-video&gt;</code></pre><pre><code>// 在json里面插入\n&quot;usingComponents&quot;: {\n  &quot;txv-video&quot;: &quot;plugin://tencentvideo/video&quot;\n}</code></pre><pre><code>// 在app.json里面引入插件，注意插件版本号填最新的版本号\n&quot;plugins&quot;: {\n  &quot;tencentvideo&quot;: {\n    &quot;version&quot;: &quot;1.2.4&quot;,\n    &quot;provider&quot;: &quot;wxa75efa648b60994b&quot;\n  }\n}</code></pre><h3 id="注意事项">注意事项</h3>\n<p>该插件的视频和腾讯视频一样有广告, 有付费去广告的功能</p>\n<p>个人开发者没有使用这个插件的权限,提审会被拒绝</p>\n<p>使用插件不需要小程序有文娱/视频资质,因为插件本身有这个资质.</p>\n<p>禁止盗播腾讯视频版权视频</p>\n'},187:function(e,n){e.exports='<h1 id="小程序实现最简单的长列表性能优化">小程序实现最简单的长列表性能优化</h1>\n<h2 id="代码片段">代码片段</h2>\n<p>看小程序里的调试台的WXML面板，会发现不管怎么滚动，WXML的节点数量是在一定范围里的。是我们预期的效果。</p>\n<h2 id="为什么要优化长列表？">为什么要优化长列表？</h2>\n<p>一般大量数据的时候我们会采用分页的方式，后端一次返回定量的数据，前端一旦分页就更换节点信息，展示新的内容。但是在移动端，分页的体验并不好，通常采用滚动的加载方式。而通常做滚动的时候，加载来的新数据都是直接添加到当前 dom 元素列表的屁股后面。加载的多了以后页面上就会有很多的节点,影响性能。</p>\n<p>看一下会无限增加节点的伪代码。</p>\n<pre><code>Page({\n  data: {\n    listData: []\n  },\n  getData() {\n    Server.postDataToHere().then(result =&gt; {\n      this.setData({\n        // 把新来的数据直接添加到data后面\n        listData: this.data.listData.concat(result)\n      })\n    })\n  }\n})</code></pre><p>这样的实现方法可以是可以，但是不仅会遇到节点过多的问题，最后还会遇到 setData 的数据量过大的问题。小程序对 setData 的数据大小是有限制的。</p>\n<h2 id="wxml-结构">WXML 结构</h2>\n<p>要滚动所以很显然要用 scroll-view。scroll-view 要绑定触底加载新数据和滚动事件。</p>\n<pre><code>// 最外层的scroll-view\n&lt;scroll-view\nscroll-y\nstyle=&quot;width:100%;height: 100vh&quot;\nbindscrolltolower=&quot;onScrollToLower&quot; // 触底加载新数据\nbindscroll=&quot;onScroll&quot;&gt; // onScroll绑定即时检查\n\n  // scroll-view里循环渲染view，要用绝对定位因为之后要算位置\n  &lt;view wx:for=&quot;{{listData}}&quot; wx:key=&quot;{{index}}&quot;\n  style=&quot;position: absolute;\n  width:300px;height:200px;\n  top:{{item.top}}px; // item的top要用item在总列表里的index值给算出来\n  background:#333&quot;&gt;\n  // view里面是什么就无所谓了，这里面放个text来显示item的index好了\n    &lt;text style=&quot;color:white;display:block;&quot;&gt;{{item.index}}&lt;/text&gt;\n  &lt;/view&gt;\n&lt;/scroll-view&gt;</code></pre><h2 id="js-结构">JS 结构</h2>\n<p>我们的 Page 的 data 里还是只有一个 listData 作为列表的数据源。其他不用 setData 的变量我们直接声明在外层。需要一个用来放到目前为止所有数据的 Array。还要有一个 scrollTop 来表示当前滚动到的位置，和一个 lastScrollTop 来表示之前一次滚动事件的位置，来判断是向上滚动还是向下滚动。</p>\n<p>还有一个<strong>indexRange</strong>来表示现在渲染的数据区域，如果经过滚动事件，发现需要的渲染的区域和上次不一样了，那么代表要 setData 了。</p>\n<pre><code>Page({\n  data: {\n    listData: [] // 作为列表的数据源\n  },\n  totalDataList: [] // 放到目前为止所有数据,\n  scrollTop:0,\n  lastScrollTop: 0，\n  indexRange: [0,0],\n  onLoad: function() {\n    ...\n  }\n  ...\n})</code></pre><h2 id="优化基本思路">优化基本思路</h2>\n<p>思路其实很简单，就是监听滚动事件，如果发现有离当前视窗很远的元素，用户根本就看不到，setData 就不包括这个元素，意思就是就不再渲染它。\n所以这其实是一个跟随事件的即时检查。</p>\n<p>下面这是这个滚动事件触发的回调函数的代码</p>\n<pre><code>  reloadData() {\n    // 原来存放最后结果的Array\n    const items = []\n\n    // 如果是向下滚动就从上次渲染区域的开头开始遍历\n    // 如果是向上滚动就从开头开始遍历\n    const start = this.lastScrollTop &lt;= this.scrollTop ? this.indexRange[0] : 0\n\n    // 从start遍历到所有数据的最后\n    for (let index = start; index &lt; this.totalDataList.length; index++) {\n      // 如果当前数据的top和scrollTop的差距超过一定的值就不再渲染它\n      if (Math.abs(this.scrollTop - this.totalDataList[index].top) &lt; 3000) {\n        // 如果还在预期的距离以内就把它放到要渲染的结果里\n        items.push(this.totalDataList[index])\n      }\n    }\n    // 有了要渲染的结果Array里以后， 对比这个结果Array和原有的indexRange，如果有出入就应该重新setData重新渲染了。\n\n    if (this.indexRange[1] !== items[items.length - 1].index || this.indexRange[0] !== items[0].index) {\n      this.indexRange[1] = items[items.length - 1].index\n      this.indexRange[0] = items[0].index\n      // 重新setData\n      this.setData({\n        listData: items\n      })\n    }\n    // 记录这次的scrollTop\n    this.lastScrollTop = this.scrollTop\n  }</code></pre><h2 id="重点">重点</h2>\n<ol>\n<li>每次scroll的时候通过遍历检查去检查所有数据的位置。</li>\n<li>每个数据的位置一定是固定的，因为使用了<strong>绝对定位</strong>，是算出来的。所以检查起来并不用去DOM里取元素的位置。</li>\n<li>判断是否要重新setData根据是根据这次判断的是否渲染结果Array对比上次已经渲染了的Array。</li>\n</ol>\n<h2 id="总结">总结</h2>\n<p>除了实时监听scroll，我们还可以使用Intersection Observer这个API，我没有试过但是因为这个API的原理好像是异步的，如果滚动过快预估会出现一些问题。</p>\n<p>这个方法在滚动很快的时候也会出现白屏的情况，比如到很下方的时候突然滚到最顶端，但是体验上我觉得是可以接受的，市面上的小程序如花瓣LITE也有这个问题。</p>\n<p>性能上主要就是每次scroll事件都再遍历。但是我们只在最外层的scroll-view的上放了一个event listener，如果想当然的话就会去给每一个元素加listener，这里一定要用绝对定位的思想转过来。</p>\n<p>明白了这个原理以后，就可以实现两列布局和瀑布流布局了。</p>\n<h2 id="完整js代码">完整JS代码</h2>\n<p>不知道为什么现在代码片段分享会报系统错误</p>\n<pre><code>Page({\n  data: {\n    listData: [{\n      top: 0,\n      index: 0\n    }, {\n      top: 210,\n      index: 1\n    }, {\n      top: 420,\n      index: 2\n    }, {\n      top: 630,\n      index: 3\n    }, {\n      top: 840,\n      index: 4\n    }]\n  },\n  totalDataList: [{\n    top: 0,\n    index: 0\n  }, {\n    top: 210,\n    index: 1\n  }, {\n    top: 420,\n    index: 2\n  }, {\n    top: 630,\n    index: 3\n  }, {\n    top: 840,\n    index: 4\n  }],\n  scrollTop: 0,\n  lastScrollTop: 0,\n  indexRange: [0, 0],\n  onLoad: function () {\n\n  },\n  getData() {\n    const result = []\n    for (let index = 0; index &lt; 5; index++) {\n      let base = this.data.listData[this.data.listData.length - 1];\n      result.push({\n        top: base.top + (index * 210),\n        index: base.index + index\n      })\n\n    }\n    this.totalDataList = this.totalDataList.concat(result)\n  },\n  onScrollToLower() {\n    this.getData()\n    this.reloadData()\n  },\n  reloadData() {\n    const items = []\n    const start = this.lastScrollTop &lt;= this.scrollTop ? this.indexRange[0] : 0\n    for (let index = start; index &lt; this.totalDataList.length; index++) {\n      if (Math.abs(this.scrollTop - this.totalDataList[index].top) &lt; 3000) {\n        items.push(this.totalDataList[index])\n      }\n    }\n    //console.log(items)\n    if (this.indexRange[1] !== items[items.length - 1].index || this.indexRange[0] !== items[0].index) {\n      this.indexRange[1] = items[items.length - 1].index\n      this.indexRange[0] = items[0].index\n      //console.log(this.indexRange)\n      this.setData({\n        listData: items\n      })\n    }\n    this.lastScrollTop = this.scrollTop\n  },\n  onScroll(e) {\n    this.scrollTop = e.detail.scrollTop\n    this.reloadData()\n  }\n})</code></pre>'},188:function(e,n){e.exports='<h1 id="js模块化历史">JS模块化历史</h1>\n<p>JS本身只能通过用script标签引入到HTML中使用。</p>\n<pre><code>&lt;body&gt;\n...\n  &lt;script src=&quot;XXX&gt;&lt;/script&gt;\n&lt;/body&gt;</code></pre><p>但是这种方法扩展性并不好，并且每一个标签都是一个请求，影响性能。</p>\n<p>我们用IIFE来完成JS的模块化。因为闭包的原因，立即执行函数内部的变量不会污染全局。</p>\n<pre><code>(function(params) {\n  return {\n    ...\n  }\n})()</code></pre><p>后来有了CommonJS，是因为Server端并没有script tag这个东西。那我们怎么把分开的JS文件引入到一起呢？我们就有了<code>require</code>和<code>module.exports</code>的语法。有了CommonJS以后，大家就开始把库都写成module，大家就都开始用NPM了。但是CommonJS是不能在浏览器中运行的？并且CommonJS本身和网络加载配合起来不太好。</p>\n<p>或者用RequireJS这样的AMD模式，把很多文件都define成全局都可以使用的变量</p>\n<p>后来有了ES Modules。有了<code>import</code>和<code>export</code>语法。但是Node上是没办法用ES Modules的。如果直接在浏览器中使用ES Modules，速度是非常慢的。</p>\n<p>grunt和gulp是任务执行工具</p>\n<ul>\n<li>给css属性添加前缀(-webkit-, -moz-)</li>\n<li>把SASS转换成CSS</li>\n<li>minify JS/CSS文件</li>\n<li>打包分开的文件</li>\n</ul>\n<p>后来就有了Webpack。</p>\n<h1 id="wepack-config">Wepack Config</h1>\n<ul>\n<li>Entry</li>\n<li>Output</li>\n<li>Loaders + Rules</li>\n</ul>\n<p>module: {\n  rules: [\n    {\n      test: regex,\n      use,\n      include,\n      exclude,\n      issuer,\n      enforce\n    }\n  ]\n}</p>\n'},189:function(e,n,t){"use strict";var o=t(155);t.n(o).a},190:function(e,n,t){(e.exports=t(34)(!1)).push([e.i,".post{width:80%;margin:4em auto 1em;padding-bottom:2rem}pre{font-family:Courier New,Courier,monospace;font-size:1.1em;padding:1em;line-height:.95em}code,pre{background:var(--background-color);border-radius:2px}",""])},197:function(e,n,t){"use strict";t.r(n);var o=t(150),r={head:function(){return{title:"".concat(this.title,"-王翌轩的个人主页"),meta:[{hid:"".concat(this.title,"-王翌轩的个人主页"),name:"".concat(this.title,"-王翌轩的个人主页"),content:"".concat(this.title,"-王翌轩的个人主页")}]}},asyncData:function(e){return{content:t(166)("./".concat(e.route.params.id,"/").concat(e.route.params.id,".md")),title:o[e.route.params.id].title}},data:function(){return{content:"",title:""}}},l=(t(189),t(11)),component=Object(l.a)(r,(function(){var e=this.$createElement,n=this._self._c||e;return n("div",[n("div",{staticClass:"post",domProps:{innerHTML:this._s(this.content)}})])}),[],!1,null,null,null);n.default=component.exports}}]);